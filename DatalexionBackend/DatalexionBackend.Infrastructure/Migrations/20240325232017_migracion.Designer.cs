// <auto-generated />
using System;
using DatalexionBackend.Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatalexionBackend.Infrastructure.Migrations
{
    [DbContext(typeof(ContextDB))]
    [Migration("20240325232017_migracion")]
    partial class migracion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("Candidate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4927),
                            Name = "Álvaro Delgado",
                            PhotoId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4928)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4931),
                            Name = "Laura Raffo",
                            PhotoId = 2,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4932)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4934),
                            Name = "Jorge Gandini",
                            PhotoId = 3,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4935)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4936),
                            Name = "Juan Sartori",
                            PhotoId = 4,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4937)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4939),
                            Name = "Yamandú Orsi",
                            PhotoId = 5,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4940)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4941),
                            Name = "Carolina Cosse",
                            PhotoId = 6,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4942)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4944),
                            Name = "Mario Bergara",
                            PhotoId = 7,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4945)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4946),
                            Name = "Pablo Mieres",
                            PhotoId = 8,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4947)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4949),
                            Name = "Edgardo Novick",
                            PhotoId = 9,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4950)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4951),
                            Name = "Andrés Lima",
                            PhotoId = 10,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4952)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4954),
                            Name = "Gabriel Gurméndez",
                            PhotoId = 11,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4954)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4956),
                            Name = "Robert Silva",
                            PhotoId = 12,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4957)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4958),
                            Name = "Andrés Ojeda",
                            PhotoId = 13,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4959)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4961),
                            Name = "Gustavo Zubía",
                            PhotoId = 14,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4961)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4963),
                            Name = "Guzmán Acosta y Lara",
                            PhotoId = 15,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4964)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4965),
                            Name = "Tabaré Viera",
                            PhotoId = 16,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4966)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlankVotes")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastUpdateDelegadoId")
                        .HasColumnType("int");

                    b.Property<string>("LatLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<int>("MunicipalityId1")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NullVotes")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("ObservedVotes")
                        .HasColumnType("int");

                    b.Property<int>("RecurredVotes")
                        .HasColumnType("int");

                    b.Property<bool>("Step1completed")
                        .HasColumnType("bit");

                    b.Property<bool>("Step2completed")
                        .HasColumnType("bit");

                    b.Property<bool>("Step3completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("MunicipalityId1");

                    b.ToTable("Circuit");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitDelegado", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("DelegadoId")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "DelegadoId");

                    b.HasIndex("DelegadoId");

                    b.ToTable("CircuitDelegado");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitParty", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "PartyId");

                    b.HasIndex("PartyId");

                    b.ToTable("CircuitParty");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitSlate", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("SlateId")
                        .HasColumnType("int");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "SlateId");

                    b.HasIndex("SlateId");

                    b.ToTable("CircuitSlate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "Frente Amplio",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5530),
                            Name = "Frente Amplio",
                            PartyId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5531)
                        },
                        new
                        {
                            Id = 2,
                            Comments = "Partido Nacional",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5537),
                            Name = "Partido Nacional",
                            PartyId = 2,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5538)
                        },
                        new
                        {
                            Id = 3,
                            Comments = "Partido Colorado",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5542),
                            Name = "Partido Colorado",
                            PartyId = 3,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5543)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Delegado");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CI = "11111111",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5593),
                            Email = "gonzalo.delegado@datalexion.lat",
                            Name = "Gonzalo",
                            Phone = "099415831",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5593)
                        },
                        new
                        {
                            Id = 2,
                            CI = "12345678",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5600),
                            Email = "diego.delegado@datalexion.lat",
                            Name = "Diego",
                            Phone = "099589896",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5600)
                        },
                        new
                        {
                            Id = 3,
                            CI = "22222222",
                            ClientId = 1,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5604),
                            Email = "pablo.delegado@datalexion.lat",
                            Name = "Pablo",
                            Phone = "099415831",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5604)
                        },
                        new
                        {
                            Id = 4,
                            CI = "33333333",
                            ClientId = 3,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5606),
                            Email = "gabriel.delegado@datalexion.lat",
                            Name = "Gabriel",
                            Phone = "099415831",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5607)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DelegadoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DelegadoId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Municipality");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SlateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SlateId");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoLongId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoShortId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhotoLongId")
                        .IsUnique()
                        .HasFilter("[PhotoLongId] IS NOT NULL");

                    b.HasIndex("PhotoShortId")
                        .IsUnique()
                        .HasFilter("[PhotoShortId] IS NOT NULL");

                    b.ToTable("Party");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5437),
                            Name = "Frente Amplio",
                            PhotoLongId = 101,
                            PhotoShortId = 111,
                            ShortName = "FA",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5438)
                        },
                        new
                        {
                            Id = 2,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5446),
                            Name = "Partido Nacional",
                            PhotoLongId = 102,
                            PhotoShortId = 112,
                            ShortName = "PN",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5447)
                        },
                        new
                        {
                            Id = 3,
                            Color = "#d62929",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5450),
                            Name = "Partido Colorado",
                            PhotoLongId = 103,
                            PhotoShortId = 113,
                            ShortName = "PC",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5451)
                        },
                        new
                        {
                            Id = 4,
                            Color = "#b929d6",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5455),
                            Name = "Partido Independiente",
                            PhotoLongId = 104,
                            PhotoShortId = 114,
                            ShortName = "PI",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5456)
                        },
                        new
                        {
                            Id = 5,
                            Color = "#f9bb28",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5458),
                            Name = "Cabildo Abierto",
                            PhotoLongId = 105,
                            PhotoShortId = 115,
                            ShortName = "CA",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5459)
                        },
                        new
                        {
                            Id = 6,
                            Color = "#009001",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5462),
                            Name = "PERI",
                            PhotoLongId = 106,
                            PhotoShortId = 116,
                            ShortName = "PERI",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5463)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int?>("CandidateId1")
                        .HasColumnType("int");

                    b.Property<int?>("CircuitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PartyLongId")
                        .HasColumnType("int");

                    b.Property<int?>("PartyShortId")
                        .HasColumnType("int");

                    b.Property<int?>("SlateId")
                        .HasColumnType("int");

                    b.Property<int?>("SlateId1")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WingId")
                        .HasColumnType("int");

                    b.Property<int?>("WingId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId1");

                    b.HasIndex("CircuitId");

                    b.HasIndex("PartyLongId");

                    b.HasIndex("PartyShortId");

                    b.HasIndex("SlateId1");

                    b.HasIndex("WingId1");

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4652),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo1.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4659)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4671),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo1.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4672)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4674),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo3.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4675)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4677),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo4.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4678)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4680),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo5.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4681)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4685),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo6.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4701)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4710),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo7.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4711)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4830),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo8.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4831)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4834),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo9.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4834)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4840),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo10.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4841)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4843),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo11.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4844)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4846),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo12.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4847)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4849),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo13.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4850)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4852),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo14.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4853)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4855),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo15.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4856)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4858),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo16.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(4859)
                        },
                        new
                        {
                            Id = 101,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5348),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo101.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5349)
                        },
                        new
                        {
                            Id = 102,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5353),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo102.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5354)
                        },
                        new
                        {
                            Id = 103,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5357),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo103.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5357)
                        },
                        new
                        {
                            Id = 104,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5359),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo104.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5360)
                        },
                        new
                        {
                            Id = 105,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5363),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo105.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5363)
                        },
                        new
                        {
                            Id = 106,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5367),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo106.jpg",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5367)
                        },
                        new
                        {
                            Id = 111,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5370),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo111.png",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5370)
                        },
                        new
                        {
                            Id = 112,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5372),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo112.png",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5373)
                        },
                        new
                        {
                            Id = 113,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5376),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo113.png",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5376)
                        },
                        new
                        {
                            Id = 114,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5379),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo114.png",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5379)
                        },
                        new
                        {
                            Id = 115,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5382),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo115.png",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5382)
                        },
                        new
                        {
                            Id = 116,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5384),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo116.png",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5385)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Center")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Zoom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5829),
                            Name = "Montevideo",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5830)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5834),
                            Name = "Canelones",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5834)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5836),
                            Name = "Maldonado",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5837)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5838),
                            Name = "Rocha",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5839)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5840),
                            Name = "Colonia",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5841)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5842),
                            Name = "Artigas",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5843)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5844),
                            Name = "Salto",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5845)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5847),
                            Name = "Paysandú",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5847)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5849),
                            Name = "Tacuarembó",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5849)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5851),
                            Name = "Rivera",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5851)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5853),
                            Name = "San José",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5854)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5855),
                            Name = "Durazno",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5855)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5857),
                            Name = "Treinta y Tres",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5858)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5859),
                            Name = "Cerro Largo",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5860)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5861),
                            Name = "Rivera",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5862)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5863),
                            Name = "Flores",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5864)
                        },
                        new
                        {
                            Id = 17,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5866),
                            Name = "Florida",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5866)
                        },
                        new
                        {
                            Id = 18,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5868),
                            Name = "Lavalleja",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5868)
                        },
                        new
                        {
                            Id = 19,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5869),
                            Name = "Soriano",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5870)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.Property<int>("WingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WingId");

                    b.ToTable("Slate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 6,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5043),
                            Name = "5005",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5044),
                            WingId = 1
                        },
                        new
                        {
                            Id = 2,
                            CandidateId = 5,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5051),
                            Name = "711",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5052),
                            WingId = 1
                        },
                        new
                        {
                            Id = 3,
                            CandidateId = 6,
                            Color = "#d62929",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5055),
                            Name = "90",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5056),
                            WingId = 1
                        },
                        new
                        {
                            Id = 4,
                            CandidateId = 5,
                            Color = "#b929d6",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5058),
                            Name = "609",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5059),
                            WingId = 1
                        },
                        new
                        {
                            Id = 5,
                            CandidateId = 1,
                            Color = "#bec11a",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5062),
                            Name = "71",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5062),
                            WingId = 2
                        },
                        new
                        {
                            Id = 6,
                            CandidateId = 1,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5065),
                            Name = "404",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5066),
                            WingId = 2
                        },
                        new
                        {
                            Id = 7,
                            CandidateId = 2,
                            Color = "#ff0000",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5068),
                            Name = "40",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5069),
                            WingId = 2
                        },
                        new
                        {
                            Id = 8,
                            CandidateId = 2,
                            Color = "#00ff00",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5074),
                            Name = "250",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5075),
                            WingId = 2
                        },
                        new
                        {
                            Id = 9,
                            CandidateId = 2,
                            Color = "#0000ff",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5077),
                            Name = "880",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5078),
                            WingId = 2
                        },
                        new
                        {
                            Id = 10,
                            CandidateId = 11,
                            Color = "#ff00ff",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5085),
                            Name = "15",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5086),
                            WingId = 3
                        },
                        new
                        {
                            Id = 11,
                            CandidateId = 12,
                            Color = "#987654",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5088),
                            Name = "85",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5089),
                            WingId = 3
                        },
                        new
                        {
                            Id = 12,
                            CandidateId = 12,
                            Color = "#abcdef",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5091),
                            Name = "1",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5091),
                            WingId = 3
                        },
                        new
                        {
                            Id = 13,
                            CandidateId = 12,
                            Color = "#fedcba",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5096),
                            Name = "2000",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5096),
                            WingId = 3
                        },
                        new
                        {
                            Id = 14,
                            CandidateId = 11,
                            Color = "#012345",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5099),
                            Name = "1515",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5099),
                            WingId = 3
                        },
                        new
                        {
                            Id = 15,
                            CandidateId = 11,
                            Color = "#012345",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5104),
                            Name = "600",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5105),
                            WingId = 3
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("Wing");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5674),
                            Name = "FA",
                            PartyId = 1,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5675)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5680),
                            Name = "PN",
                            PartyId = 2,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5681)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5683),
                            Name = "PC",
                            PartyId = 3,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5683)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5685),
                            Name = "PI",
                            PartyId = 4,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5686)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5688),
                            Name = "CA",
                            PartyId = 5,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5689)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5691),
                            Name = "PERI",
                            PartyId = 6,
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 912, DateTimeKind.Local).AddTicks(5693)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "c2ee6493-5a73-46f3-a3f2-46d1d11d7176"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "role",
                            ClaimValue = "Analyst",
                            UserId = "e0765c93-676c-4199-b7ee-d7877c471821"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "8498a3ff-ca69-4b93-9a37-49a73c8dec77"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c2ee6493-5a73-46f3-a3f2-46d1d11d7176",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "e0765c93-676c-4199-b7ee-d7877c471821",
                            RoleId = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c"
                        },
                        new
                        {
                            UserId = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "8498a3ff-ca69-4b93-9a37-49a73c8dec77",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("DatalexionRole");

                    b.HasData(
                        new
                        {
                            Id = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 12, 183, DateTimeKind.Local).AddTicks(9651),
                            Update = new DateTime(2024, 3, 25, 20, 20, 12, 183, DateTimeKind.Local).AddTicks(9654)
                        },
                        new
                        {
                            Id = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c",
                            Name = "Analyst",
                            NormalizedName = "ANALYST",
                            Creation = new DateTime(2024, 3, 25, 20, 20, 12, 183, DateTimeKind.Local).AddTicks(9683),
                            Update = new DateTime(2024, 3, 25, 20, 20, 12, 183, DateTimeKind.Local).AddTicks(9684)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasIndex("ClientId");

                    b.HasDiscriminator().HasValue("DatalexionUser");

                    b.HasData(
                        new
                        {
                            Id = "c2ee6493-5a73-46f3-a3f2-46d1d11d7176",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c46ec809-3818-4587-982d-cbc5af3f66ae",
                            Email = "admin@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@DATALEXION.LAT",
                            NormalizedUserName = "USERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECbLln9FOZHcDxMk2PqwokMKivGIX8zTA01KhLKUa0I5j3DgdFRhBZVQo4WadzLb9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e113f56a-85fc-4349-9998-417a5ae8def6",
                            TwoFactorEnabled = false,
                            UserName = "useradmin",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 12, 183, DateTimeKind.Local).AddTicks(9707),
                            Name = "Usuario administrador",
                            Update = new DateTime(2024, 3, 25, 20, 20, 12, 183, DateTimeKind.Local).AddTicks(9709)
                        },
                        new
                        {
                            Id = "e0765c93-676c-4199-b7ee-d7877c471821",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f976962d-8c0c-4f0a-9052-6a29d78029a2",
                            Email = "normal@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMAL@DATALEXION.LAT",
                            NormalizedUserName = "USERANALISTA",
                            PasswordHash = "AQAAAAIAAYagAAAAEHF/Fa6YiABXAGxs+GHdwR+sxtMxa/MjL5CxuuAn+0TTadTpz30gX0k054nfw0LwNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b58a2ac-8dfc-4c3d-aba2-adbaee01ca31",
                            TwoFactorEnabled = false,
                            UserName = "useranalista",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 533, DateTimeKind.Local).AddTicks(5769),
                            Name = "Usuario analista",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 533, DateTimeKind.Local).AddTicks(5779)
                        },
                        new
                        {
                            Id = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a95d352-5f61-4e75-b454-3d70ad6a0366",
                            Email = "adminfa@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINFA@DATALEXION.LAT",
                            NormalizedUserName = "ADMINFA",
                            PasswordHash = "AQAAAAIAAYagAAAAED1JUAj4ZHzXJDp9172AgnQtjrGaAPJt+OFt5MJ9sO96AnC5eLLMEXuOstgPvydrnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e24b63a9-d67c-4c85-bacf-ac78308a17ba",
                            TwoFactorEnabled = false,
                            UserName = "adminfa",
                            ClientId = 1,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 12, 494, DateTimeKind.Local).AddTicks(8328),
                            Name = "Admin FA",
                            Update = new DateTime(2024, 3, 25, 20, 20, 12, 494, DateTimeKind.Local).AddTicks(8340)
                        },
                        new
                        {
                            Id = "8498a3ff-ca69-4b93-9a37-49a73c8dec77",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e8d8405-5b83-4307-b67e-de6850510c96",
                            Email = "adminpn@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINPN@DATALEXION.LAT",
                            NormalizedUserName = "ADMINPN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJi+dQih4QLKBYDLKpawCK+hk0LD3jvGPWcSQ4ch7DX7si1oDEFmEt0777I66Nqh/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d6d91d9-21c7-42d4-bb11-a077c72de717",
                            TwoFactorEnabled = false,
                            UserName = "adminpn",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 12, 921, DateTimeKind.Local).AddTicks(2215),
                            Name = "Admin PN",
                            Update = new DateTime(2024, 3, 25, 20, 20, 12, 921, DateTimeKind.Local).AddTicks(2222)
                        },
                        new
                        {
                            Id = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92c4119e-1553-4ad5-b6c3-4468d87dd8a2",
                            Email = "adminpc@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINPC@DATALEXION.LAT",
                            NormalizedUserName = "ADMINPC",
                            PasswordHash = "AQAAAAIAAYagAAAAEApSV5L5lYL4itFiWuWJ1ys1Vyvq6Oq/NDMU9Tu0rw+6HKQsxPsIcK+pYiPi0CZ9ZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0a3845e-61c9-441a-9b94-dec1cb2b80c8",
                            TwoFactorEnabled = false,
                            UserName = "adminpc",
                            ClientId = 3,
                            Creation = new DateTime(2024, 3, 25, 20, 20, 13, 222, DateTimeKind.Local).AddTicks(7619),
                            Name = "Admin PC",
                            Update = new DateTime(2024, 3, 25, 20, 20, 13, 222, DateTimeKind.Local).AddTicks(7634)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Candidate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Candidate", "PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Municipality", null)
                        .WithMany("ListCircuits")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitDelegado", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitDelegados")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Delegado", "Delegado")
                        .WithMany("ListCircuitDelegados")
                        .HasForeignKey("DelegadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Delegado");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitParty", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitParties")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany("ListCircuitParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitSlate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitSlates")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany("ListCircuitSlates")
                        .HasForeignKey("SlateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Slate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Client", "Client")
                        .WithMany("ListDelegados")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Delegado", "Delegado")
                        .WithMany("ListMunicipalities")
                        .HasForeignKey("DelegadoId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Province", "Province")
                        .WithMany("ListMunicipalities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delegado");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Participant", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany("ListParticipants")
                        .HasForeignKey("SlateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Slate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "PhotoLong")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Party", "PhotoLongId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "PhotoShort")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Party", "PhotoShortId");

                    b.Navigation("PhotoLong");

                    b.Navigation("PhotoShort");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Photo", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId1");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListPhotos")
                        .HasForeignKey("CircuitId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "PartyLong")
                        .WithMany()
                        .HasForeignKey("PartyLongId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "PartyShort")
                        .WithMany()
                        .HasForeignKey("PartyShortId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany()
                        .HasForeignKey("SlateId1");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Wing", "Wing")
                        .WithMany()
                        .HasForeignKey("WingId1");

                    b.Navigation("Candidate");

                    b.Navigation("Circuit");

                    b.Navigation("PartyLong");

                    b.Navigation("PartyShort");

                    b.Navigation("Slate");

                    b.Navigation("Wing");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Slate", "PhotoId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Province", "Province")
                        .WithMany("ListSlates")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Wing", "Wing")
                        .WithMany("ListSlates")
                        .HasForeignKey("WingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Photo");

                    b.Navigation("Province");

                    b.Navigation("Wing");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany("ListWings")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Wing", "PhotoId");

                    b.Navigation("Party");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionUser", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Client", "Client")
                        .WithMany("ListUsers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.Navigation("ListCircuitDelegados");

                    b.Navigation("ListCircuitParties");

                    b.Navigation("ListCircuitSlates");

                    b.Navigation("ListPhotos");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.Navigation("ListDelegados");

                    b.Navigation("ListUsers");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.Navigation("ListCircuitDelegados");

                    b.Navigation("ListMunicipalities");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.Navigation("ListCircuits");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.Navigation("ListCircuitParties");

                    b.Navigation("ListWings");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Province", b =>
                {
                    b.Navigation("ListMunicipalities");

                    b.Navigation("ListSlates");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.Navigation("ListCircuitSlates");

                    b.Navigation("ListParticipants");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.Navigation("ListSlates");
                });
#pragma warning restore 612, 618
        }
    }
}
