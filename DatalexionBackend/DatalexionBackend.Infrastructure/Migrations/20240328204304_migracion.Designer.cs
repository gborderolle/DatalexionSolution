// <auto-generated />
using System;
using DatalexionBackend.Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatalexionBackend.Infrastructure.Migrations
{
    [DbContext(typeof(ContextDB))]
    [Migration("20240328204304_migracion")]
    partial class migracion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("Candidate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3310),
                            Name = "Álvaro Delgado",
                            PhotoId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3311)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3351),
                            Name = "Laura Raffo",
                            PhotoId = 2,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3352)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3353),
                            Name = "Jorge Gandini",
                            PhotoId = 3,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3353)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3354),
                            Name = "Juan Sartori",
                            PhotoId = 4,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3354)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3356),
                            Name = "Yamandú Orsi",
                            PhotoId = 5,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3357)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3358),
                            Name = "Carolina Cosse",
                            PhotoId = 6,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3358)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3359),
                            Name = "Mario Bergara",
                            PhotoId = 7,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3359)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3360),
                            Name = "Pablo Mieres",
                            PhotoId = 8,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3360)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3361),
                            Name = "Edgardo Novick",
                            PhotoId = 9,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3361)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3362),
                            Name = "Andrés Lima",
                            PhotoId = 10,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3362)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3363),
                            Name = "Gabriel Gurméndez",
                            PhotoId = 11,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3363)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3364),
                            Name = "Robert Silva",
                            PhotoId = 12,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3364)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3365),
                            Name = "Andrés Ojeda",
                            PhotoId = 13,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3366)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3366),
                            Name = "Gustavo Zubía",
                            PhotoId = 14,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3367)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3367),
                            Name = "Guzmán Acosta y Lara",
                            PhotoId = 15,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3368)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3369),
                            Name = "Tabaré Viera",
                            PhotoId = 16,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3369)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlankVotes")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastUpdateDelegadoId")
                        .HasColumnType("int");

                    b.Property<string>("LatLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<int>("MunicipalityId1")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NullVotes")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("ObservedVotes")
                        .HasColumnType("int");

                    b.Property<int>("RecurredVotes")
                        .HasColumnType("int");

                    b.Property<bool>("Step1completed")
                        .HasColumnType("bit");

                    b.Property<bool>("Step2completed")
                        .HasColumnType("bit");

                    b.Property<bool>("Step3completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("MunicipalityId1");

                    b.ToTable("Circuit");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitDelegado", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("DelegadoId")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "DelegadoId");

                    b.HasIndex("DelegadoId");

                    b.ToTable("CircuitDelegado");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitParty", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "PartyId");

                    b.HasIndex("PartyId");

                    b.ToTable("CircuitParty");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitSlate", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("SlateId")
                        .HasColumnType("int");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "SlateId");

                    b.HasIndex("SlateId");

                    b.ToTable("CircuitSlate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "Frente Amplio",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4190),
                            Name = "Frente Amplio",
                            PartyId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4192)
                        },
                        new
                        {
                            Id = 2,
                            Comments = "Partido Nacional",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4196),
                            Name = "Partido Nacional",
                            PartyId = 2,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4196)
                        },
                        new
                        {
                            Id = 3,
                            Comments = "Partido Colorado",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4198),
                            Name = "Partido Colorado",
                            PartyId = 3,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4198)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Delegado");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CI = "11111111",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4237),
                            Email = "gonzalo.delegado@datalexion.lat",
                            Name = "Gonzalo",
                            Phone = "099415831",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4237)
                        },
                        new
                        {
                            Id = 2,
                            CI = "12345678",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4240),
                            Email = "diego.delegado@datalexion.lat",
                            Name = "Diego",
                            Phone = "099589896",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4241)
                        },
                        new
                        {
                            Id = 3,
                            CI = "22222222",
                            ClientId = 1,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4242),
                            Email = "pablo.delegado@datalexion.lat",
                            Name = "Pablo",
                            Phone = "099415831",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4243)
                        },
                        new
                        {
                            Id = 4,
                            CI = "33333333",
                            ClientId = 3,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4244),
                            Email = "gabriel.delegado@datalexion.lat",
                            Name = "Gabriel",
                            Phone = "099415831",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4244)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DelegadoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DelegadoId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Municipality");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SlateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SlateId");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoLongId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoShortId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhotoLongId")
                        .IsUnique()
                        .HasFilter("[PhotoLongId] IS NOT NULL");

                    b.HasIndex("PhotoShortId")
                        .IsUnique()
                        .HasFilter("[PhotoShortId] IS NOT NULL");

                    b.ToTable("Party");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4121),
                            Name = "Frente Amplio",
                            PhotoLongId = 101,
                            PhotoShortId = 111,
                            ShortName = "FA",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4122)
                        },
                        new
                        {
                            Id = 2,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4130),
                            Name = "Partido Nacional",
                            PhotoLongId = 102,
                            PhotoShortId = 112,
                            ShortName = "PN",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4131)
                        },
                        new
                        {
                            Id = 3,
                            Color = "#d62929",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4133),
                            Name = "Partido Colorado",
                            PhotoLongId = 103,
                            PhotoShortId = 113,
                            ShortName = "PC",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4134)
                        },
                        new
                        {
                            Id = 4,
                            Color = "#b929d6",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4135),
                            Name = "Partido Independiente",
                            PhotoLongId = 104,
                            PhotoShortId = 114,
                            ShortName = "PI",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4136)
                        },
                        new
                        {
                            Id = 5,
                            Color = "#f9bb28",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4138),
                            Name = "Cabildo Abierto",
                            PhotoLongId = 105,
                            PhotoShortId = 115,
                            ShortName = "CA",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4138)
                        },
                        new
                        {
                            Id = 6,
                            Color = "#009001",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4139),
                            Name = "PERI",
                            PhotoLongId = 106,
                            PhotoShortId = 116,
                            ShortName = "PERI",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4139)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int?>("CandidateId1")
                        .HasColumnType("int");

                    b.Property<int?>("CircuitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PartyLongId")
                        .HasColumnType("int");

                    b.Property<int?>("PartyShortId")
                        .HasColumnType("int");

                    b.Property<int?>("SlateId")
                        .HasColumnType("int");

                    b.Property<int?>("SlateId1")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WingId")
                        .HasColumnType("int");

                    b.Property<int?>("WingId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId1");

                    b.HasIndex("CircuitId");

                    b.HasIndex("PartyLongId");

                    b.HasIndex("PartyShortId");

                    b.HasIndex("SlateId1");

                    b.HasIndex("WingId1");

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2648),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo1.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2664)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2684),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo1.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2684)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2686),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo3.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2687)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2693),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo4.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2693)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2695),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo5.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2696)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2716),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo6.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2716)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2723),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo7.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2723)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2727),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo8.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2727)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2730),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo9.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2730)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2734),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo10.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(2734)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3173),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo11.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3176)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3177),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo12.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3178)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3179),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo13.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3179)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3181),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo14.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3181)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3182),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo15.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3183)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3184),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo16.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3184)
                        },
                        new
                        {
                            Id = 101,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4008),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo101.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4008)
                        },
                        new
                        {
                            Id = 102,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4011),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo102.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4012)
                        },
                        new
                        {
                            Id = 103,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4013),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo103.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4013)
                        },
                        new
                        {
                            Id = 104,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4019),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo104.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4021)
                        },
                        new
                        {
                            Id = 105,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4022),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo105.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4022)
                        },
                        new
                        {
                            Id = 106,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4024),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo106.jpg",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4024)
                        },
                        new
                        {
                            Id = 111,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4026),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo111.png",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4026)
                        },
                        new
                        {
                            Id = 112,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4027),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo112.png",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4028)
                        },
                        new
                        {
                            Id = 113,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4029),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo113.png",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4030)
                        },
                        new
                        {
                            Id = 114,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4087),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo114.png",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4088)
                        },
                        new
                        {
                            Id = 115,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4089),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo115.png",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4089)
                        },
                        new
                        {
                            Id = 116,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4090),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo116.png",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4092)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Center")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Zoom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4356),
                            Name = "Montevideo",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4356)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4357),
                            Name = "Canelones",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4358)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4358),
                            Name = "Maldonado",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4359)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4359),
                            Name = "Rocha",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4360)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4360),
                            Name = "Colonia",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4361)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4361),
                            Name = "Artigas",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4362)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4362),
                            Name = "Salto",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4362)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4363),
                            Name = "Paysandú",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4363)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4364),
                            Name = "Tacuarembó",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4365)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4366),
                            Name = "Rivera",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4366)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4367),
                            Name = "San José",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4367)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4368),
                            Name = "Durazno",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4368)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4369),
                            Name = "Treinta y Tres",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4369)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4370),
                            Name = "Cerro Largo",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4370)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4371),
                            Name = "Rivera",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4371)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4371),
                            Name = "Flores",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4372)
                        },
                        new
                        {
                            Id = 17,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4372),
                            Name = "Florida",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4373)
                        },
                        new
                        {
                            Id = 18,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4373),
                            Name = "Lavalleja",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4374)
                        },
                        new
                        {
                            Id = 19,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4374),
                            Name = "Soriano",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4375)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.Property<int>("WingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WingId");

                    b.ToTable("Slate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 6,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3428),
                            Name = "5005",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3428),
                            WingId = 1
                        },
                        new
                        {
                            Id = 2,
                            CandidateId = 5,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3434),
                            Name = "711",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3434),
                            WingId = 1
                        },
                        new
                        {
                            Id = 3,
                            CandidateId = 6,
                            Color = "#d62929",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3436),
                            Name = "90",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3436),
                            WingId = 1
                        },
                        new
                        {
                            Id = 4,
                            CandidateId = 5,
                            Color = "#b929d6",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3438),
                            Name = "609",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3438),
                            WingId = 1
                        },
                        new
                        {
                            Id = 5,
                            CandidateId = 1,
                            Color = "#bec11a",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3439),
                            Name = "71",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3439),
                            WingId = 2
                        },
                        new
                        {
                            Id = 6,
                            CandidateId = 1,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3442),
                            Name = "404",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3442),
                            WingId = 2
                        },
                        new
                        {
                            Id = 7,
                            CandidateId = 2,
                            Color = "#ff0000",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3444),
                            Name = "40",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3444),
                            WingId = 2
                        },
                        new
                        {
                            Id = 8,
                            CandidateId = 2,
                            Color = "#00ff00",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3445),
                            Name = "250",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3445),
                            WingId = 2
                        },
                        new
                        {
                            Id = 9,
                            CandidateId = 2,
                            Color = "#0000ff",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3447),
                            Name = "880",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3447),
                            WingId = 2
                        },
                        new
                        {
                            Id = 10,
                            CandidateId = 11,
                            Color = "#ff00ff",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3453),
                            Name = "15",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3453),
                            WingId = 3
                        },
                        new
                        {
                            Id = 11,
                            CandidateId = 12,
                            Color = "#987654",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3454),
                            Name = "85",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3455),
                            WingId = 3
                        },
                        new
                        {
                            Id = 12,
                            CandidateId = 12,
                            Color = "#abcdef",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3456),
                            Name = "1",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3456),
                            WingId = 3
                        },
                        new
                        {
                            Id = 13,
                            CandidateId = 12,
                            Color = "#fedcba",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3930),
                            Name = "2000",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3931),
                            WingId = 3
                        },
                        new
                        {
                            Id = 14,
                            CandidateId = 11,
                            Color = "#012345",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3933),
                            Name = "1515",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3933),
                            WingId = 3
                        },
                        new
                        {
                            Id = 15,
                            CandidateId = 11,
                            Color = "#012345",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3934),
                            Name = "600",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(3935),
                            WingId = 3
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("Wing");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4291),
                            Name = "FA",
                            PartyId = 1,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4291)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4297),
                            Name = "PN",
                            PartyId = 2,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4297)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4298),
                            Name = "PC",
                            PartyId = 3,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4298)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4299),
                            Name = "PI",
                            PartyId = 4,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4299)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4300),
                            Name = "CA",
                            PartyId = 5,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4300)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4302),
                            Name = "PERI",
                            PartyId = 6,
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 741, DateTimeKind.Local).AddTicks(4302)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "8498a3ff-ca69-4b93-9a37-49a73c8dec77"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "role",
                            ClaimValue = "Analyst",
                            UserId = "e15e9299-d3b5-42fc-b101-44da6ad799de"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "role",
                            ClaimValue = "Analyst",
                            UserId = "ddc18aa2-c5c7-40c9-9db3-246d2a05a06c"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "role",
                            ClaimValue = "Analyst",
                            UserId = "b5172b14-f9e4-48f6-9634-2241c87f1719"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "8498a3ff-ca69-4b93-9a37-49a73c8dec77",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "e15e9299-d3b5-42fc-b101-44da6ad799de",
                            RoleId = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c"
                        },
                        new
                        {
                            UserId = "ddc18aa2-c5c7-40c9-9db3-246d2a05a06c",
                            RoleId = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c"
                        },
                        new
                        {
                            UserId = "b5172b14-f9e4-48f6-9634-2241c87f1719",
                            RoleId = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("DatalexionRole");

                    b.HasData(
                        new
                        {
                            Id = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 161, DateTimeKind.Local).AddTicks(1402),
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 161, DateTimeKind.Local).AddTicks(1403)
                        },
                        new
                        {
                            Id = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c",
                            Name = "Analyst",
                            NormalizedName = "ANALYST",
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 161, DateTimeKind.Local).AddTicks(1417),
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 161, DateTimeKind.Local).AddTicks(1418)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasIndex("ClientId");

                    b.HasDiscriminator().HasValue("DatalexionUser");

                    b.HasData(
                        new
                        {
                            Id = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b52143f4-dcab-41b9-9ae8-ec874bae2889",
                            Email = "adminfa@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINFA@DATALEXION.LAT",
                            NormalizedUserName = "ADMINFA",
                            PasswordHash = "AQAAAAIAAYagAAAAEOSHysGdRtEaJJ7rxOlHR8tY3Ae8timK/7kZgVvSKvFPtgeeBFyP7eycW2y4IiKpng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5674bae7-9d5d-420a-a903-c26b9fe67aff",
                            TwoFactorEnabled = false,
                            UserName = "adminfa",
                            ClientId = 1,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 161, DateTimeKind.Local).AddTicks(1673),
                            Name = "Admin FA",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 161, DateTimeKind.Local).AddTicks(1674)
                        },
                        new
                        {
                            Id = "8498a3ff-ca69-4b93-9a37-49a73c8dec77",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89677d93-87c2-43b4-ba35-18e3086c2b87",
                            Email = "adminpn@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINPN@DATALEXION.LAT",
                            NormalizedUserName = "ADMINPN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPiv3WIn7G+y74E8ZK4wMcTCMhV6TPFS094YvyIFsUPjicxYxAeqt+WfBRDM+LwZdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d38e36c-c474-40d8-b5a1-7a9b9bddd37e",
                            TwoFactorEnabled = false,
                            UserName = "adminpn",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 261, DateTimeKind.Local).AddTicks(8084),
                            Name = "Admin PN",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 261, DateTimeKind.Local).AddTicks(8090)
                        },
                        new
                        {
                            Id = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5425ae10-440d-4406-8bcc-5ac96b28bb40",
                            Email = "adminpc@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINPC@DATALEXION.LAT",
                            NormalizedUserName = "ADMINPC",
                            PasswordHash = "AQAAAAIAAYagAAAAEP6kh6rQnBBeP7OUl7c30+u1XmZ8XUYNrdmevGU13ZaBjdMxsRia12+PmxoHwl/Odg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "12b33634-79ce-4cd9-99f6-0c8a7dd81d5a",
                            TwoFactorEnabled = false,
                            UserName = "adminpc",
                            ClientId = 3,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 367, DateTimeKind.Local).AddTicks(8369),
                            Name = "Admin PC",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 367, DateTimeKind.Local).AddTicks(8377)
                        },
                        new
                        {
                            Id = "e15e9299-d3b5-42fc-b101-44da6ad799de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c40e3e13-cb05-450c-b552-821422a94376",
                            Email = "normal@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMAL@DATALEXION.LAT",
                            NormalizedUserName = "ANALYSTFA",
                            PasswordHash = "AQAAAAIAAYagAAAAEIOjiuikAdA+KwGtEFTgMhDt/FZMQx53uUEJhoAy5eOyGlCz9wk1J9/fFOUZcVY7oA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "beef589a-aae1-439c-8e72-eb4fe3ab7e2d",
                            TwoFactorEnabled = false,
                            UserName = "analystfa",
                            ClientId = 1,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 458, DateTimeKind.Local).AddTicks(7472),
                            Name = "Analista FA",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 458, DateTimeKind.Local).AddTicks(7482)
                        },
                        new
                        {
                            Id = "ddc18aa2-c5c7-40c9-9db3-246d2a05a06c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07ea9ed0-8578-4085-80f1-4acc0841d524",
                            Email = "normal@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMAL@DATALEXION.LAT",
                            NormalizedUserName = "ANALYSTPN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPv4q3HkQdGMr2WwesvakJs98TMJLqlntsU7F7aQwDtSC01C+zqbsHqyxrNUrvrsEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7898ed17-e63e-4331-9bb2-7b045de38a73",
                            TwoFactorEnabled = false,
                            UserName = "analystpn",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 544, DateTimeKind.Local).AddTicks(4097),
                            Name = "Analista PN",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 544, DateTimeKind.Local).AddTicks(4110)
                        },
                        new
                        {
                            Id = "b5172b14-f9e4-48f6-9634-2241c87f1719",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "643bb06a-7279-4f60-abb0-ef35145d1974",
                            Email = "normal@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMAL@DATALEXION.LAT",
                            NormalizedUserName = "ANALYSTPC",
                            PasswordHash = "AQAAAAIAAYagAAAAECvM/R/hrZq8ZPxiEJd4B/kE25JJu86DjTNq0BgfySI3TzG1zRK6MSFEuBYWKjH9Eg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7687bfc4-aadd-4aba-a77b-65a9d6fb7b74",
                            TwoFactorEnabled = false,
                            UserName = "analystpc",
                            ClientId = 3,
                            Creation = new DateTime(2024, 3, 28, 17, 43, 3, 636, DateTimeKind.Local).AddTicks(6864),
                            Name = "Analista PC",
                            Update = new DateTime(2024, 3, 28, 17, 43, 3, 636, DateTimeKind.Local).AddTicks(6872)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Candidate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Candidate", "PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Municipality", null)
                        .WithMany("ListCircuits")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitDelegado", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitDelegados")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Delegado", "Delegado")
                        .WithMany("ListCircuitDelegados")
                        .HasForeignKey("DelegadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Delegado");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitParty", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitParties")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany("ListCircuitParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitSlate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitSlates")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany("ListCircuitSlates")
                        .HasForeignKey("SlateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Slate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Client", "Client")
                        .WithMany("ListDelegados")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Delegado", "Delegado")
                        .WithMany("ListMunicipalities")
                        .HasForeignKey("DelegadoId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Province", "Province")
                        .WithMany("ListMunicipalities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delegado");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Participant", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany("ListParticipants")
                        .HasForeignKey("SlateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Slate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "PhotoLong")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Party", "PhotoLongId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "PhotoShort")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Party", "PhotoShortId");

                    b.Navigation("PhotoLong");

                    b.Navigation("PhotoShort");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Photo", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId1");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListPhotos")
                        .HasForeignKey("CircuitId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "PartyLong")
                        .WithMany()
                        .HasForeignKey("PartyLongId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "PartyShort")
                        .WithMany()
                        .HasForeignKey("PartyShortId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany()
                        .HasForeignKey("SlateId1");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Wing", "Wing")
                        .WithMany()
                        .HasForeignKey("WingId1");

                    b.Navigation("Candidate");

                    b.Navigation("Circuit");

                    b.Navigation("PartyLong");

                    b.Navigation("PartyShort");

                    b.Navigation("Slate");

                    b.Navigation("Wing");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Slate", "PhotoId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Province", "Province")
                        .WithMany("ListSlates")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Wing", "Wing")
                        .WithMany("ListSlates")
                        .HasForeignKey("WingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Photo");

                    b.Navigation("Province");

                    b.Navigation("Wing");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany("ListWings")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Wing", "PhotoId");

                    b.Navigation("Party");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionUser", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Client", "Client")
                        .WithMany("ListUsers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.Navigation("ListCircuitDelegados");

                    b.Navigation("ListCircuitParties");

                    b.Navigation("ListCircuitSlates");

                    b.Navigation("ListPhotos");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.Navigation("ListDelegados");

                    b.Navigation("ListUsers");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.Navigation("ListCircuitDelegados");

                    b.Navigation("ListMunicipalities");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.Navigation("ListCircuits");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.Navigation("ListCircuitParties");

                    b.Navigation("ListWings");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Province", b =>
                {
                    b.Navigation("ListMunicipalities");

                    b.Navigation("ListSlates");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.Navigation("ListCircuitSlates");

                    b.Navigation("ListParticipants");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.Navigation("ListSlates");
                });
#pragma warning restore 612, 618
        }
    }
}
