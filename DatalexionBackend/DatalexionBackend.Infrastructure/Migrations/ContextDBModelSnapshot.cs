// <auto-generated />
using System;
using DatalexionBackend.Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatalexionBackend.Infrastructure.Migrations
{
    [DbContext(typeof(ContextDB))]
    partial class ContextDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("Candidate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5063),
                            Name = "Álvaro Delgado",
                            PhotoId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5064)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5068),
                            Name = "Laura Raffo",
                            PhotoId = 2,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5068)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5070),
                            Name = "Jorge Gandini",
                            PhotoId = 3,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5071)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5161),
                            Name = "Juan Sartori",
                            PhotoId = 4,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5161)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5164),
                            Name = "Yamandú Orsi",
                            PhotoId = 5,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5165)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5166),
                            Name = "Carolina Cosse",
                            PhotoId = 6,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5167)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5168),
                            Name = "Mario Bergara",
                            PhotoId = 7,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5169)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5171),
                            Name = "Pablo Mieres",
                            PhotoId = 8,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5172)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5173),
                            Name = "Edgardo Novick",
                            PhotoId = 9,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5174)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5176),
                            Name = "Andrés Lima",
                            PhotoId = 10,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5177)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5178),
                            Name = "Gabriel Gurméndez",
                            PhotoId = 11,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5179)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5181),
                            Name = "Robert Silva",
                            PhotoId = 12,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5181)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5183),
                            Name = "Andrés Ojeda",
                            PhotoId = 13,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5184)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5185),
                            Name = "Gustavo Zubía",
                            PhotoId = 14,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5186)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5188),
                            Name = "Guzmán Acosta y Lara",
                            PhotoId = 15,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5188)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5190),
                            Name = "Tabaré Viera",
                            PhotoId = 16,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5191)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("LatLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<int>("MunicipalityId1")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("MunicipalityId1");

                    b.ToTable("Circuit");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitDelegado", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("DelegadoId")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "DelegadoId");

                    b.HasIndex("DelegadoId");

                    b.ToTable("CircuitDelegado");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitParty", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int>("BlankVotes")
                        .HasColumnType("int");

                    b.Property<int?>("LastUpdateDelegadoId")
                        .HasColumnType("int");

                    b.Property<int>("NullVotes")
                        .HasColumnType("int");

                    b.Property<int>("ObservedVotes")
                        .HasColumnType("int");

                    b.Property<int>("RecurredVotes")
                        .HasColumnType("int");

                    b.Property<bool>("Step1completed")
                        .HasColumnType("bit");

                    b.Property<bool>("Step2completed")
                        .HasColumnType("bit");

                    b.Property<bool>("Step3completed")
                        .HasColumnType("bit");

                    b.Property<int?>("TotalPartyVotes")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "PartyId");

                    b.HasIndex("PartyId");

                    b.ToTable("CircuitParty");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitSlate", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("SlateId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSlateVotes")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "SlateId");

                    b.HasIndex("SlateId");

                    b.ToTable("CircuitSlate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "Frente Amplio",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5744),
                            Name = "Frente Amplio",
                            PartyId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5745)
                        },
                        new
                        {
                            Id = 2,
                            Comments = "Partido Nacional",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5751),
                            Name = "Partido Nacional",
                            PartyId = 2,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5752)
                        },
                        new
                        {
                            Id = 3,
                            Comments = "Partido Colorado",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5756),
                            Name = "Partido Colorado",
                            PartyId = 3,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5757)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Delegado");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CI = "11111111",
                            ClientId = 2,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5803),
                            Email = "gonzalo.delegado@datalexion.lat",
                            Name = "Gonzalo",
                            Phone = "099415831",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5803)
                        },
                        new
                        {
                            Id = 2,
                            CI = "12345678",
                            ClientId = 2,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5810),
                            Email = "diego.delegado@datalexion.lat",
                            Name = "Diego",
                            Phone = "099589896",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5810)
                        },
                        new
                        {
                            Id = 3,
                            CI = "22222222",
                            ClientId = 1,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5813),
                            Email = "pablo.delegado@datalexion.lat",
                            Name = "Pablo",
                            Phone = "099415831",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5814)
                        },
                        new
                        {
                            Id = 4,
                            CI = "33333333",
                            ClientId = 3,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5816),
                            Email = "gabriel.delegado@datalexion.lat",
                            Name = "Gabriel",
                            Phone = "099415831",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5817)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DelegadoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DelegadoId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Municipality");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SlateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SlateId");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoLongId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoShortId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhotoLongId")
                        .IsUnique()
                        .HasFilter("[PhotoLongId] IS NOT NULL");

                    b.HasIndex("PhotoShortId")
                        .IsUnique()
                        .HasFilter("[PhotoShortId] IS NOT NULL");

                    b.ToTable("Party");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5654),
                            Name = "Frente Amplio",
                            PhotoLongId = 101,
                            PhotoShortId = 111,
                            ShortName = "FA",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5655)
                        },
                        new
                        {
                            Id = 2,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5662),
                            Name = "Partido Nacional",
                            PhotoLongId = 102,
                            PhotoShortId = 112,
                            ShortName = "PN",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5663)
                        },
                        new
                        {
                            Id = 3,
                            Color = "#d62929",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5666),
                            Name = "Partido Colorado",
                            PhotoLongId = 103,
                            PhotoShortId = 113,
                            ShortName = "PC",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5667)
                        },
                        new
                        {
                            Id = 4,
                            Color = "#b929d6",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5670),
                            Name = "Partido Independiente",
                            PhotoLongId = 104,
                            PhotoShortId = 114,
                            ShortName = "PI",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5671)
                        },
                        new
                        {
                            Id = 5,
                            Color = "#f9bb28",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5673),
                            Name = "Cabildo Abierto",
                            PhotoLongId = 105,
                            PhotoShortId = 115,
                            ShortName = "CA",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5674)
                        },
                        new
                        {
                            Id = 6,
                            Color = "#009001",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5677),
                            Name = "PERI",
                            PhotoLongId = 106,
                            PhotoShortId = 116,
                            ShortName = "PERI",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5677)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int?>("CandidateId1")
                        .HasColumnType("int");

                    b.Property<int?>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int?>("CircuitId1")
                        .HasColumnType("int");

                    b.Property<int?>("CircuitPartyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PartyLongId")
                        .HasColumnType("int");

                    b.Property<int?>("PartyShortId")
                        .HasColumnType("int");

                    b.Property<int?>("SlateId")
                        .HasColumnType("int");

                    b.Property<int?>("SlateId1")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WingId")
                        .HasColumnType("int");

                    b.Property<int?>("WingId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId1");

                    b.HasIndex("PartyLongId");

                    b.HasIndex("PartyShortId");

                    b.HasIndex("SlateId1");

                    b.HasIndex("WingId1");

                    b.HasIndex("CircuitId1", "CircuitPartyId");

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4907),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo1.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4917)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4929),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo1.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4929)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4932),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo3.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4933)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4935),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo4.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4936)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4938),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo5.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4939)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4959),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo6.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4960)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4962),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo7.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4962)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4965),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo8.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4965)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4970),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo9.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4970)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4974),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo10.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4975)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4977),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo11.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4978)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4980),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo12.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4980)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4982),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo13.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4983)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4985),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo14.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4986)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4988),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo15.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4988)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4990),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo16.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(4991)
                        },
                        new
                        {
                            Id = 101,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5414),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo101.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5414)
                        },
                        new
                        {
                            Id = 102,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5419),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo102.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5419)
                        },
                        new
                        {
                            Id = 103,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5421),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo103.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5422)
                        },
                        new
                        {
                            Id = 104,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5424),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo104.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5424)
                        },
                        new
                        {
                            Id = 105,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5427),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo105.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5427)
                        },
                        new
                        {
                            Id = 106,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5430),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo106.jpg",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5431)
                        },
                        new
                        {
                            Id = 111,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5585),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo111.png",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5585)
                        },
                        new
                        {
                            Id = 112,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5588),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo112.png",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5588)
                        },
                        new
                        {
                            Id = 113,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5590),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo113.png",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5591)
                        },
                        new
                        {
                            Id = 114,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5595),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo114.png",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5595)
                        },
                        new
                        {
                            Id = 115,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5598),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo115.png",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5598)
                        },
                        new
                        {
                            Id = 116,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5600),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo116.png",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5601)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Center")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Zoom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5983),
                            Name = "Montevideo",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5983)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5987),
                            Name = "Canelones",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5987)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5989),
                            Name = "Maldonado",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5990)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5991),
                            Name = "Rocha",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5992)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5993),
                            Name = "Colonia",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5994)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5995),
                            Name = "Artigas",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5996)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5997),
                            Name = "Salto",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5998)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5999),
                            Name = "Paysandú",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6000)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6001),
                            Name = "Tacuarembó",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6002)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6003),
                            Name = "Rivera",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6004)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6005),
                            Name = "San José",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6006)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6007),
                            Name = "Durazno",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6007)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6009),
                            Name = "Treinta y Tres",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6009)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6011),
                            Name = "Cerro Largo",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6011)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6013),
                            Name = "Rivera",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6013)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6015),
                            Name = "Flores",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6015)
                        },
                        new
                        {
                            Id = 17,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6017),
                            Name = "Florida",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6017)
                        },
                        new
                        {
                            Id = 18,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6018),
                            Name = "Lavalleja",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6019)
                        },
                        new
                        {
                            Id = 19,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6111),
                            Name = "Soriano",
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(6112)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.Property<int>("WingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WingId");

                    b.ToTable("Slate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 6,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5269),
                            Name = "5005",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5270),
                            WingId = 1
                        },
                        new
                        {
                            Id = 2,
                            CandidateId = 5,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5282),
                            Name = "711",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5283),
                            WingId = 1
                        },
                        new
                        {
                            Id = 3,
                            CandidateId = 6,
                            Color = "#d62929",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5286),
                            Name = "90",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5286),
                            WingId = 1
                        },
                        new
                        {
                            Id = 4,
                            CandidateId = 5,
                            Color = "#b929d6",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5289),
                            Name = "609",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5290),
                            WingId = 1
                        },
                        new
                        {
                            Id = 5,
                            CandidateId = 1,
                            Color = "#bec11a",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5292),
                            Name = "71",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5293),
                            WingId = 2
                        },
                        new
                        {
                            Id = 6,
                            CandidateId = 1,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5295),
                            Name = "404",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5296),
                            WingId = 2
                        },
                        new
                        {
                            Id = 7,
                            CandidateId = 2,
                            Color = "#ff0000",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5299),
                            Name = "40",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5299),
                            WingId = 2
                        },
                        new
                        {
                            Id = 8,
                            CandidateId = 2,
                            Color = "#00ff00",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5302),
                            Name = "250",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5302),
                            WingId = 2
                        },
                        new
                        {
                            Id = 9,
                            CandidateId = 2,
                            Color = "#0000ff",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5305),
                            Name = "880",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5305),
                            WingId = 2
                        },
                        new
                        {
                            Id = 10,
                            CandidateId = 11,
                            Color = "#ff00ff",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5308),
                            Name = "15",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5309),
                            WingId = 3
                        },
                        new
                        {
                            Id = 11,
                            CandidateId = 12,
                            Color = "#987654",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5311),
                            Name = "85",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5312),
                            WingId = 3
                        },
                        new
                        {
                            Id = 12,
                            CandidateId = 12,
                            Color = "#abcdef",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5315),
                            Name = "1",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5315),
                            WingId = 3
                        },
                        new
                        {
                            Id = 13,
                            CandidateId = 12,
                            Color = "#fedcba",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5318),
                            Name = "2000",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5318),
                            WingId = 3
                        },
                        new
                        {
                            Id = 14,
                            CandidateId = 11,
                            Color = "#012345",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5321),
                            Name = "1515",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5322),
                            WingId = 3
                        },
                        new
                        {
                            Id = 15,
                            CandidateId = 11,
                            Color = "#012345",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5324),
                            Name = "600",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5325),
                            WingId = 3
                        },
                        new
                        {
                            Id = 16,
                            CandidateId = 5,
                            Color = "#abcdef",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5327),
                            Name = "500",
                            ProvinceId = 2,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5328),
                            WingId = 1
                        },
                        new
                        {
                            Id = 17,
                            CandidateId = 5,
                            Color = "#fedcba",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5331),
                            Name = "123",
                            ProvinceId = 2,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5331),
                            WingId = 1
                        },
                        new
                        {
                            Id = 18,
                            CandidateId = 5,
                            Color = "#012345",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5334),
                            Name = "999",
                            ProvinceId = 2,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5334),
                            WingId = 1
                        },
                        new
                        {
                            Id = 19,
                            CandidateId = 5,
                            Color = "#abcdef",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5337),
                            Name = "777",
                            ProvinceId = 2,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5338),
                            WingId = 1
                        },
                        new
                        {
                            Id = 20,
                            CandidateId = 1,
                            Color = "#fedcba",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5340),
                            Name = "333",
                            ProvinceId = 2,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5341),
                            WingId = 2
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("Wing");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5867),
                            Name = "FA",
                            PartyId = 1,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5868)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5874),
                            Name = "PN",
                            PartyId = 2,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5874)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5877),
                            Name = "PC",
                            PartyId = 3,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5878)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5880),
                            Name = "PI",
                            PartyId = 4,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5880)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5882),
                            Name = "CA",
                            PartyId = 5,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5883)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5884),
                            Name = "PERI",
                            PartyId = 6,
                            Update = new DateTime(2024, 4, 19, 0, 59, 12, 12, DateTimeKind.Local).AddTicks(5885)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "8498a3ff-ca69-4b93-9a37-49a73c8dec77"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "role",
                            ClaimValue = "Analyst",
                            UserId = "e15e9299-d3b5-42fc-b101-44da6ad799de"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "role",
                            ClaimValue = "Analyst",
                            UserId = "ddc18aa2-c5c7-40c9-9db3-246d2a05a06c"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "role",
                            ClaimValue = "Analyst",
                            UserId = "b5172b14-f9e4-48f6-9634-2241c87f1719"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "8498a3ff-ca69-4b93-9a37-49a73c8dec77",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "e15e9299-d3b5-42fc-b101-44da6ad799de",
                            RoleId = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c"
                        },
                        new
                        {
                            UserId = "ddc18aa2-c5c7-40c9-9db3-246d2a05a06c",
                            RoleId = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c"
                        },
                        new
                        {
                            UserId = "b5172b14-f9e4-48f6-9634-2241c87f1719",
                            RoleId = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("DatalexionRole");

                    b.HasData(
                        new
                        {
                            Id = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 10, 924, DateTimeKind.Local).AddTicks(3007),
                            Update = new DateTime(2024, 4, 19, 0, 59, 10, 924, DateTimeKind.Local).AddTicks(3008)
                        },
                        new
                        {
                            Id = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c",
                            Name = "Analyst",
                            NormalizedName = "ANALYST",
                            Creation = new DateTime(2024, 4, 19, 0, 59, 10, 924, DateTimeKind.Local).AddTicks(3025),
                            Update = new DateTime(2024, 4, 19, 0, 59, 10, 924, DateTimeKind.Local).AddTicks(3026)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasIndex("ClientId");

                    b.HasDiscriminator().HasValue("DatalexionUser");

                    b.HasData(
                        new
                        {
                            Id = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9e07b21-ecd2-4a02-baa0-2234b4629aff",
                            Email = "adminfa@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINFA@DATALEXION.LAT",
                            NormalizedUserName = "ADMINFA",
                            PasswordHash = "AQAAAAIAAYagAAAAEC18Vqmffdd+hlWo1FURLLuMuS+EUAXDtCnwjWcOX9aihgLACtYutPSx45Az/0fxSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0710836-e253-4f3d-83d1-88234b48c8b1",
                            TwoFactorEnabled = false,
                            UserName = "adminfa",
                            ClientId = 1,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 10, 924, DateTimeKind.Local).AddTicks(3802),
                            Name = "Admin FA",
                            Update = new DateTime(2024, 4, 19, 0, 59, 10, 924, DateTimeKind.Local).AddTicks(3804)
                        },
                        new
                        {
                            Id = "8498a3ff-ca69-4b93-9a37-49a73c8dec77",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9f8ffb3-c139-4461-af7a-fbb9f8dda473",
                            Email = "adminpn@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINPN@DATALEXION.LAT",
                            NormalizedUserName = "ADMINPN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHsdxg7vJJzAq7HwsGXXbEO6XX1bP91tgKCzhmiKYmIUbKiXoRnBmDGnNpIfkfuORw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c98918b3-d6c0-44dd-8cde-36d3486f1fac",
                            TwoFactorEnabled = false,
                            UserName = "adminpn",
                            ClientId = 2,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 11, 108, DateTimeKind.Local).AddTicks(7013),
                            Name = "Admin PN",
                            Update = new DateTime(2024, 4, 19, 0, 59, 11, 108, DateTimeKind.Local).AddTicks(7019)
                        },
                        new
                        {
                            Id = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba66decb-c622-424c-96a3-1a25638b60cb",
                            Email = "adminpc@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINPC@DATALEXION.LAT",
                            NormalizedUserName = "ADMINPC",
                            PasswordHash = "AQAAAAIAAYagAAAAEAIn1bGmvFtcNRwZ4Zxb4+TMElHjio4XbLa1v4vTSB/2Jhj++MyP3PRxqJ4jy7Vr2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b9e59f4-3a47-4ffb-b15f-a8e1d7c58867",
                            TwoFactorEnabled = false,
                            UserName = "adminpc",
                            ClientId = 3,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 11, 281, DateTimeKind.Local).AddTicks(8975),
                            Name = "Admin PC",
                            Update = new DateTime(2024, 4, 19, 0, 59, 11, 281, DateTimeKind.Local).AddTicks(8988)
                        },
                        new
                        {
                            Id = "e15e9299-d3b5-42fc-b101-44da6ad799de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96b2f0a4-bf8c-4a2e-908e-2a74c3643a05",
                            Email = "normal@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMAL@DATALEXION.LAT",
                            NormalizedUserName = "ANALYSTFA",
                            PasswordHash = "AQAAAAIAAYagAAAAEDxoO74oUQK8sQWvreYhILHNoUiz55IXTL0d8vhuce+UARRnxxyGG36uDjEA9X3Wwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0de85f01-d4ef-4245-878b-21bcbe6a7e74",
                            TwoFactorEnabled = false,
                            UserName = "analystfa",
                            ClientId = 1,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 11, 476, DateTimeKind.Local).AddTicks(1023),
                            Name = "Analista FA",
                            Update = new DateTime(2024, 4, 19, 0, 59, 11, 476, DateTimeKind.Local).AddTicks(1035)
                        },
                        new
                        {
                            Id = "ddc18aa2-c5c7-40c9-9db3-246d2a05a06c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a8ea6f8-0955-4751-a0d7-0e29dabaf511",
                            Email = "normal@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMAL@DATALEXION.LAT",
                            NormalizedUserName = "ANALYSTPN",
                            PasswordHash = "AQAAAAIAAYagAAAAEChKHPUYOnVnaZHbD1stBlvTqLbwlrlfFX3jod7rYWe7lgVApK1zBdie/fdlX20rTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "073ba4db-e092-433f-af16-98749819d581",
                            TwoFactorEnabled = false,
                            UserName = "analystpn",
                            ClientId = 2,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 11, 683, DateTimeKind.Local).AddTicks(9555),
                            Name = "Analista PN",
                            Update = new DateTime(2024, 4, 19, 0, 59, 11, 683, DateTimeKind.Local).AddTicks(9561)
                        },
                        new
                        {
                            Id = "b5172b14-f9e4-48f6-9634-2241c87f1719",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ffa1fcb-aaac-4598-ba5f-66ebbec52afc",
                            Email = "normal@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMAL@DATALEXION.LAT",
                            NormalizedUserName = "ANALYSTPC",
                            PasswordHash = "AQAAAAIAAYagAAAAEAnLq7Uj6Mc3W98Moy8Us+2Ul+cpLIQvX2BErWBCLvVnEorDpbM51K08Of2yU8P+iw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2bfe13d-a9ca-4ecb-9125-2fd3b4d3eb08",
                            TwoFactorEnabled = false,
                            UserName = "analystpc",
                            ClientId = 3,
                            Creation = new DateTime(2024, 4, 19, 0, 59, 11, 894, DateTimeKind.Local).AddTicks(568),
                            Name = "Analista PC",
                            Update = new DateTime(2024, 4, 19, 0, 59, 11, 894, DateTimeKind.Local).AddTicks(579)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Candidate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Candidate", "PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Municipality", null)
                        .WithMany("ListCircuits")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitDelegado", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitDelegados")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Delegado", "Delegado")
                        .WithMany("ListCircuitDelegados")
                        .HasForeignKey("DelegadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Delegado");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitParty", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitParties")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany("ListCircuitParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitSlate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitSlates")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany("ListCircuitSlates")
                        .HasForeignKey("SlateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Slate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Client", "Client")
                        .WithMany("ListDelegados")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Delegado", "Delegado")
                        .WithMany("ListMunicipalities")
                        .HasForeignKey("DelegadoId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Province", "Province")
                        .WithMany("ListMunicipalities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delegado");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Participant", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany("ListParticipants")
                        .HasForeignKey("SlateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Slate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "PhotoLong")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Party", "PhotoLongId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "PhotoShort")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Party", "PhotoShortId");

                    b.Navigation("PhotoLong");

                    b.Navigation("PhotoShort");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Photo", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId1");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "PartyLong")
                        .WithMany()
                        .HasForeignKey("PartyLongId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "PartyShort")
                        .WithMany()
                        .HasForeignKey("PartyShortId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany()
                        .HasForeignKey("SlateId1");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Wing", "Wing")
                        .WithMany()
                        .HasForeignKey("WingId1");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.CircuitParty", "Circuit")
                        .WithMany("ListPhotos")
                        .HasForeignKey("CircuitId1", "CircuitPartyId");

                    b.Navigation("Candidate");

                    b.Navigation("Circuit");

                    b.Navigation("PartyLong");

                    b.Navigation("PartyShort");

                    b.Navigation("Slate");

                    b.Navigation("Wing");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Slate", "PhotoId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Province", "Province")
                        .WithMany("ListSlates")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Wing", "Wing")
                        .WithMany("ListSlates")
                        .HasForeignKey("WingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Photo");

                    b.Navigation("Province");

                    b.Navigation("Wing");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany("ListWings")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Wing", "PhotoId");

                    b.Navigation("Party");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionUser", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Client", "Client")
                        .WithMany("ListUsers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.Navigation("ListCircuitDelegados");

                    b.Navigation("ListCircuitParties");

                    b.Navigation("ListCircuitSlates");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitParty", b =>
                {
                    b.Navigation("ListPhotos");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.Navigation("ListDelegados");

                    b.Navigation("ListUsers");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.Navigation("ListCircuitDelegados");

                    b.Navigation("ListMunicipalities");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.Navigation("ListCircuits");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.Navigation("ListCircuitParties");

                    b.Navigation("ListWings");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Province", b =>
                {
                    b.Navigation("ListMunicipalities");

                    b.Navigation("ListSlates");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.Navigation("ListCircuitSlates");

                    b.Navigation("ListParticipants");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.Navigation("ListSlates");
                });
#pragma warning restore 612, 618
        }
    }
}
