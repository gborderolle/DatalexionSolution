// <auto-generated />
using System;
using DatalexionBackend.Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatalexionBackend.Infrastructure.Migrations
{
    [DbContext(typeof(ContextDB))]
    partial class ContextDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("Candidate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3969),
                            Name = "Álvaro Delgado",
                            PhotoId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3970)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3971),
                            Name = "Laura Raffo",
                            PhotoId = 2,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3972)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3973),
                            Name = "Jorge Gandini",
                            PhotoId = 3,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3973)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3974),
                            Name = "Juan Sartori",
                            PhotoId = 4,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3974)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3975),
                            Name = "Yamandú Orsi",
                            PhotoId = 5,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3976)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3977),
                            Name = "Carolina Cosse",
                            PhotoId = 6,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3977)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3978),
                            Name = "Mario Bergara",
                            PhotoId = 7,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3979)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3980),
                            Name = "Pablo Mieres",
                            PhotoId = 8,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3980)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3981),
                            Name = "Edgardo Novick",
                            PhotoId = 9,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3981)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3982),
                            Name = "Andrés Lima",
                            PhotoId = 10,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3983)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3984),
                            Name = "Gabriel Gurméndez",
                            PhotoId = 11,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3985)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3985),
                            Name = "Robert Silva",
                            PhotoId = 12,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3986)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3987),
                            Name = "Andrés Ojeda",
                            PhotoId = 13,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3987)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3988),
                            Name = "Gustavo Zubía",
                            PhotoId = 14,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3989)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3990),
                            Name = "Guzmán Acosta y Lara",
                            PhotoId = 15,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3990)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3991),
                            Name = "Tabaré Viera",
                            PhotoId = 16,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3992)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlankVotes")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastUpdateDelegadoId")
                        .HasColumnType("int");

                    b.Property<string>("LatLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<int>("MunicipalityId1")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NullVotes")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("ObservedVotes")
                        .HasColumnType("int");

                    b.Property<int>("RecurredVotes")
                        .HasColumnType("int");

                    b.Property<bool>("Step1completed")
                        .HasColumnType("bit");

                    b.Property<bool>("Step2completed")
                        .HasColumnType("bit");

                    b.Property<bool>("Step3completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("MunicipalityId1");

                    b.ToTable("Circuit");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitDelegado", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("DelegadoId")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "DelegadoId");

                    b.HasIndex("DelegadoId");

                    b.ToTable("CircuitDelegado");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitParty", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "PartyId");

                    b.HasIndex("PartyId");

                    b.ToTable("CircuitParty");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitSlate", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("SlateId")
                        .HasColumnType("int");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "SlateId");

                    b.HasIndex("SlateId");

                    b.ToTable("CircuitSlate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "Frente Amplio",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5193),
                            Name = "Frente Amplio",
                            PartyId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5194)
                        },
                        new
                        {
                            Id = 2,
                            Comments = "Partido Nacional",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5198),
                            Name = "Partido Nacional",
                            PartyId = 2,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5198)
                        },
                        new
                        {
                            Id = 3,
                            Comments = "Partido Colorado",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5201),
                            Name = "Partido Colorado",
                            PartyId = 3,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5201)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Delegado");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CI = "11111111",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5238),
                            Email = "gonzalo.delegado@datalexion.lat",
                            Name = "Gonzalo",
                            Phone = "099415831",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5239)
                        },
                        new
                        {
                            Id = 2,
                            CI = "12345678",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5243),
                            Email = "diego.delegado@datalexion.lat",
                            Name = "Diego",
                            Phone = "099589896",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5244)
                        },
                        new
                        {
                            Id = 3,
                            CI = "22222222",
                            ClientId = 1,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5245),
                            Email = "pablo.delegado@datalexion.lat",
                            Name = "Pablo",
                            Phone = "099415831",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5246)
                        },
                        new
                        {
                            Id = 4,
                            CI = "33333333",
                            ClientId = 3,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5247),
                            Email = "gabriel.delegado@datalexion.lat",
                            Name = "Gabriel",
                            Phone = "099415831",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5247)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DelegadoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DelegadoId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Municipality");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SlateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SlateId");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoLongId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoShortId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhotoLongId")
                        .IsUnique()
                        .HasFilter("[PhotoLongId] IS NOT NULL");

                    b.HasIndex("PhotoShortId")
                        .IsUnique()
                        .HasFilter("[PhotoShortId] IS NOT NULL");

                    b.ToTable("Party");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4227),
                            Name = "Frente Amplio",
                            PhotoLongId = 101,
                            PhotoShortId = 111,
                            ShortName = "FA",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4227)
                        },
                        new
                        {
                            Id = 2,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5072),
                            Name = "Partido Nacional",
                            PhotoLongId = 102,
                            PhotoShortId = 112,
                            ShortName = "PN",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5075)
                        },
                        new
                        {
                            Id = 3,
                            Color = "#d62929",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5080),
                            Name = "Partido Colorado",
                            PhotoLongId = 103,
                            PhotoShortId = 113,
                            ShortName = "PC",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5081)
                        },
                        new
                        {
                            Id = 4,
                            Color = "#b929d6",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5082),
                            Name = "Partido Independiente",
                            PhotoLongId = 104,
                            PhotoShortId = 114,
                            ShortName = "PI",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5083)
                        },
                        new
                        {
                            Id = 5,
                            Color = "#f9bb28",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5084),
                            Name = "Cabildo Abierto",
                            PhotoLongId = 105,
                            PhotoShortId = 115,
                            ShortName = "CA",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5085)
                        },
                        new
                        {
                            Id = 6,
                            Color = "#009001",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5086),
                            Name = "PERI",
                            PhotoLongId = 106,
                            PhotoShortId = 116,
                            ShortName = "PERI",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5086)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int?>("CandidateId1")
                        .HasColumnType("int");

                    b.Property<int?>("CircuitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PartyLongId")
                        .HasColumnType("int");

                    b.Property<int?>("PartyShortId")
                        .HasColumnType("int");

                    b.Property<int?>("SlateId")
                        .HasColumnType("int");

                    b.Property<int?>("SlateId1")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WingId")
                        .HasColumnType("int");

                    b.Property<int?>("WingId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId1");

                    b.HasIndex("CircuitId");

                    b.HasIndex("PartyLongId");

                    b.HasIndex("PartyShortId");

                    b.HasIndex("SlateId1");

                    b.HasIndex("WingId1");

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3694),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo1.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3699)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3718),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo1.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3719)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3721),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo3.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3722)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3723),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo4.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3724)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3725),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo5.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3726)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3735),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo6.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3735)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3737),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo7.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3737)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3739),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo8.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3739)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3741),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo9.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3741)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3743),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo10.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3743)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3875),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo11.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3876)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3877),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo12.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3878)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3885),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo13.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3885)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3887),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo14.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3887)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3889),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo15.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3890)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3891),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo16.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(3892)
                        },
                        new
                        {
                            Id = 101,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4152),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo101.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4153)
                        },
                        new
                        {
                            Id = 102,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4155),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo102.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4156)
                        },
                        new
                        {
                            Id = 103,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4168),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo103.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4168)
                        },
                        new
                        {
                            Id = 104,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4170),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo104.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4170)
                        },
                        new
                        {
                            Id = 105,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4172),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo105.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4173)
                        },
                        new
                        {
                            Id = 106,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4175),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo106.jpg",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4176)
                        },
                        new
                        {
                            Id = 111,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4178),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo111.png",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4178)
                        },
                        new
                        {
                            Id = 112,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4179),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo112.png",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4180)
                        },
                        new
                        {
                            Id = 113,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4181),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo113.png",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4182)
                        },
                        new
                        {
                            Id = 114,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4189),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo114.png",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4189)
                        },
                        new
                        {
                            Id = 115,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4191),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo115.png",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4191)
                        },
                        new
                        {
                            Id = 116,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4195),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo116.png",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4195)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Center")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Zoom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5361),
                            Name = "Montevideo",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5362)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5421),
                            Name = "Canelones",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5421)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5422),
                            Name = "Maldonado",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5422)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5423),
                            Name = "Rocha",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5424)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5424),
                            Name = "Colonia",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5425)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5426),
                            Name = "Artigas",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5426)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5427),
                            Name = "Salto",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5427)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5428),
                            Name = "Paysandú",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5428)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5429),
                            Name = "Tacuarembó",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5429)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5430),
                            Name = "Rivera",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5430)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5431),
                            Name = "San José",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5431)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5432),
                            Name = "Durazno",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5432)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5433),
                            Name = "Treinta y Tres",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5434)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5434),
                            Name = "Cerro Largo",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5435)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5435),
                            Name = "Rivera",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5436)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5436),
                            Name = "Flores",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5437)
                        },
                        new
                        {
                            Id = 17,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5437),
                            Name = "Florida",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5438)
                        },
                        new
                        {
                            Id = 18,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5439),
                            Name = "Lavalleja",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5439)
                        },
                        new
                        {
                            Id = 19,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5440),
                            Name = "Soriano",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5440)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.Property<int>("WingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WingId");

                    b.ToTable("Slate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 6,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4051),
                            Name = "5005",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4051),
                            WingId = 1
                        },
                        new
                        {
                            Id = 2,
                            CandidateId = 5,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4074),
                            Name = "711",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4074),
                            WingId = 1
                        },
                        new
                        {
                            Id = 3,
                            CandidateId = 6,
                            Color = "#d62929",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4076),
                            Name = "90",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4076),
                            WingId = 1
                        },
                        new
                        {
                            Id = 4,
                            CandidateId = 5,
                            Color = "#b929d6",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4078),
                            Name = "609",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4078),
                            WingId = 1
                        },
                        new
                        {
                            Id = 5,
                            CandidateId = 1,
                            Color = "#bec11a",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4080),
                            Name = "71",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4081),
                            WingId = 2
                        },
                        new
                        {
                            Id = 6,
                            CandidateId = 1,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4082),
                            Name = "404",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4083),
                            WingId = 2
                        },
                        new
                        {
                            Id = 7,
                            CandidateId = 2,
                            Color = "#ff0000",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4084),
                            Name = "40",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4084),
                            WingId = 2
                        },
                        new
                        {
                            Id = 8,
                            CandidateId = 2,
                            Color = "#00ff00",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4086),
                            Name = "250",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4086),
                            WingId = 2
                        },
                        new
                        {
                            Id = 9,
                            CandidateId = 2,
                            Color = "#0000ff",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4088),
                            Name = "880",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4088),
                            WingId = 2
                        },
                        new
                        {
                            Id = 10,
                            CandidateId = 11,
                            Color = "#ff00ff",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4089),
                            Name = "15",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4090),
                            WingId = 3
                        },
                        new
                        {
                            Id = 11,
                            CandidateId = 12,
                            Color = "#987654",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4091),
                            Name = "85",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4091),
                            WingId = 3
                        },
                        new
                        {
                            Id = 12,
                            CandidateId = 12,
                            Color = "#abcdef",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4093),
                            Name = "1",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4094),
                            WingId = 3
                        },
                        new
                        {
                            Id = 13,
                            CandidateId = 12,
                            Color = "#fedcba",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4095),
                            Name = "2000",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4095),
                            WingId = 3
                        },
                        new
                        {
                            Id = 14,
                            CandidateId = 11,
                            Color = "#012345",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4096),
                            Name = "1515",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4097),
                            WingId = 3
                        },
                        new
                        {
                            Id = 15,
                            CandidateId = 11,
                            Color = "#012345",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4098),
                            Name = "600",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(4099),
                            WingId = 3
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("Wing");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5292),
                            Name = "FA",
                            PartyId = 1,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5292)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5302),
                            Name = "PN",
                            PartyId = 2,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5302)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5304),
                            Name = "PC",
                            PartyId = 3,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5304)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5305),
                            Name = "PI",
                            PartyId = 4,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5305)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5306),
                            Name = "CA",
                            PartyId = 5,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5307)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5307),
                            Name = "PERI",
                            PartyId = 6,
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 528, DateTimeKind.Local).AddTicks(5308)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "8498a3ff-ca69-4b93-9a37-49a73c8dec77"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "role",
                            ClaimValue = "Analyst",
                            UserId = "e15e9299-d3b5-42fc-b101-44da6ad799de"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "role",
                            ClaimValue = "Analyst",
                            UserId = "ddc18aa2-c5c7-40c9-9db3-246d2a05a06c"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "role",
                            ClaimValue = "Analyst",
                            UserId = "b5172b14-f9e4-48f6-9634-2241c87f1719"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "8498a3ff-ca69-4b93-9a37-49a73c8dec77",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "e15e9299-d3b5-42fc-b101-44da6ad799de",
                            RoleId = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c"
                        },
                        new
                        {
                            UserId = "ddc18aa2-c5c7-40c9-9db3-246d2a05a06c",
                            RoleId = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c"
                        },
                        new
                        {
                            UserId = "b5172b14-f9e4-48f6-9634-2241c87f1719",
                            RoleId = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("DatalexionRole");

                    b.HasData(
                        new
                        {
                            Id = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 24, DateTimeKind.Local).AddTicks(1618),
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 24, DateTimeKind.Local).AddTicks(1619)
                        },
                        new
                        {
                            Id = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c",
                            Name = "Analyst",
                            NormalizedName = "ANALYST",
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 24, DateTimeKind.Local).AddTicks(1643),
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 24, DateTimeKind.Local).AddTicks(1643)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasIndex("ClientId");

                    b.HasDiscriminator().HasValue("DatalexionUser");

                    b.HasData(
                        new
                        {
                            Id = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c37c3042-4f45-4b02-b464-3a1cef4d02ee",
                            Email = "adminfa@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINFA@DATALEXION.LAT",
                            NormalizedUserName = "ADMINFA",
                            PasswordHash = "AQAAAAIAAYagAAAAECmZNWkzPmDXCWY/pe2IMkOQrCfLHusVmx6UfQux/D/DrxfF3e4PTk1ht+FE9JGaxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d222482-cac1-4993-9245-5bbf3d8f7708",
                            TwoFactorEnabled = false,
                            UserName = "adminfa",
                            ClientId = 1,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 24, DateTimeKind.Local).AddTicks(2043),
                            Name = "Admin FA",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 24, DateTimeKind.Local).AddTicks(2044)
                        },
                        new
                        {
                            Id = "8498a3ff-ca69-4b93-9a37-49a73c8dec77",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a37e0bf9-3e54-42c9-98ef-3a07b933137f",
                            Email = "adminpn@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINPN@DATALEXION.LAT",
                            NormalizedUserName = "ADMINPN",
                            PasswordHash = "AQAAAAIAAYagAAAAEK3ZcA6q6vOCe15KrCgcxR5DBw+cla2Lhsfj6tl08ArwaJOJoWYOWwlzsVGoxsjwnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3fdbcdc-c711-40e2-a00a-e44578f59754",
                            TwoFactorEnabled = false,
                            UserName = "adminpn",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 124, DateTimeKind.Local).AddTicks(3742),
                            Name = "Admin PN",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 124, DateTimeKind.Local).AddTicks(3749)
                        },
                        new
                        {
                            Id = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "866fad3b-28b8-4cb2-82a3-5a77b254c468",
                            Email = "adminpc@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINPC@DATALEXION.LAT",
                            NormalizedUserName = "ADMINPC",
                            PasswordHash = "AQAAAAIAAYagAAAAEGw4tq3fD5Ua5n5LLv/2legxTcmScC0WQu8KpSGGnae4KSBInSUQ9IibjI8kvNlPpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8dc8a874-349f-46ec-ad7d-adb45aa4b512",
                            TwoFactorEnabled = false,
                            UserName = "adminpc",
                            ClientId = 3,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 203, DateTimeKind.Local).AddTicks(2066),
                            Name = "Admin PC",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 203, DateTimeKind.Local).AddTicks(2071)
                        },
                        new
                        {
                            Id = "e15e9299-d3b5-42fc-b101-44da6ad799de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc8aa862-bce6-4176-afaf-5e5d8585181c",
                            Email = "normal@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMAL@DATALEXION.LAT",
                            NormalizedUserName = "ANALYSTFA",
                            PasswordHash = "AQAAAAIAAYagAAAAEDAJpJ4o9d/G5Ghi2zcBiRbmtekb9Lmz29MLCnpyfofc/h+qtzWoW4QfhyTxK32v3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7dc4b64-6904-434e-ae10-70d2526d6e15",
                            TwoFactorEnabled = false,
                            UserName = "analystfa",
                            ClientId = 1,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 281, DateTimeKind.Local).AddTicks(8311),
                            Name = "Analista FA",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 281, DateTimeKind.Local).AddTicks(8317)
                        },
                        new
                        {
                            Id = "ddc18aa2-c5c7-40c9-9db3-246d2a05a06c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78ca5ac6-e55c-4ef6-a02d-cdf1ff95f52a",
                            Email = "normal@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMAL@DATALEXION.LAT",
                            NormalizedUserName = "ANALYSTPN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGs4qW7nQ5TwTBNmRIkgmeQu9Oot4iW0NVzmXaqdPmhvRn7zwzuJKVhKcNvAP6TtuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b112a8d-71da-49df-8ca2-884c934d86a6",
                            TwoFactorEnabled = false,
                            UserName = "analystpn",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 370, DateTimeKind.Local).AddTicks(6298),
                            Name = "Analista PN",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 370, DateTimeKind.Local).AddTicks(6305)
                        },
                        new
                        {
                            Id = "b5172b14-f9e4-48f6-9634-2241c87f1719",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37457df8-2f27-411c-9c8a-37f4defb8d52",
                            Email = "normal@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMAL@DATALEXION.LAT",
                            NormalizedUserName = "ANALYSTPC",
                            PasswordHash = "AQAAAAIAAYagAAAAEDb2/SaGvBOBPwltpKxJj9sdFwx6j6v1je/v0YAlpIeyztzZTy1/fFqgSNGl4fN1hA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f7b893e-0146-4115-8af2-b0b102bdc21e",
                            TwoFactorEnabled = false,
                            UserName = "analystpc",
                            ClientId = 3,
                            Creation = new DateTime(2024, 3, 31, 22, 56, 14, 449, DateTimeKind.Local).AddTicks(3613),
                            Name = "Analista PC",
                            Update = new DateTime(2024, 3, 31, 22, 56, 14, 449, DateTimeKind.Local).AddTicks(3620)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Candidate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Candidate", "PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Municipality", null)
                        .WithMany("ListCircuits")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitDelegado", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitDelegados")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Delegado", "Delegado")
                        .WithMany("ListCircuitDelegados")
                        .HasForeignKey("DelegadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Delegado");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitParty", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitParties")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany("ListCircuitParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitSlate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitSlates")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany("ListCircuitSlates")
                        .HasForeignKey("SlateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Slate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Client", "Client")
                        .WithMany("ListDelegados")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Delegado", "Delegado")
                        .WithMany("ListMunicipalities")
                        .HasForeignKey("DelegadoId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Province", "Province")
                        .WithMany("ListMunicipalities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delegado");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Participant", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany("ListParticipants")
                        .HasForeignKey("SlateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Slate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "PhotoLong")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Party", "PhotoLongId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "PhotoShort")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Party", "PhotoShortId");

                    b.Navigation("PhotoLong");

                    b.Navigation("PhotoShort");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Photo", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId1");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListPhotos")
                        .HasForeignKey("CircuitId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "PartyLong")
                        .WithMany()
                        .HasForeignKey("PartyLongId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "PartyShort")
                        .WithMany()
                        .HasForeignKey("PartyShortId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany()
                        .HasForeignKey("SlateId1");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Wing", "Wing")
                        .WithMany()
                        .HasForeignKey("WingId1");

                    b.Navigation("Candidate");

                    b.Navigation("Circuit");

                    b.Navigation("PartyLong");

                    b.Navigation("PartyShort");

                    b.Navigation("Slate");

                    b.Navigation("Wing");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Slate", "PhotoId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Province", "Province")
                        .WithMany("ListSlates")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Wing", "Wing")
                        .WithMany("ListSlates")
                        .HasForeignKey("WingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Photo");

                    b.Navigation("Province");

                    b.Navigation("Wing");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany("ListWings")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Wing", "PhotoId");

                    b.Navigation("Party");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionUser", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Client", "Client")
                        .WithMany("ListUsers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.Navigation("ListCircuitDelegados");

                    b.Navigation("ListCircuitParties");

                    b.Navigation("ListCircuitSlates");

                    b.Navigation("ListPhotos");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.Navigation("ListDelegados");

                    b.Navigation("ListUsers");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.Navigation("ListCircuitDelegados");

                    b.Navigation("ListMunicipalities");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.Navigation("ListCircuits");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.Navigation("ListCircuitParties");

                    b.Navigation("ListWings");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Province", b =>
                {
                    b.Navigation("ListMunicipalities");

                    b.Navigation("ListSlates");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.Navigation("ListCircuitSlates");

                    b.Navigation("ListParticipants");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.Navigation("ListSlates");
                });
#pragma warning restore 612, 618
        }
    }
}
