// <auto-generated />
using System;
using DatalexionBackend.Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatalexionBackend.Infrastructure.Migrations
{
    [DbContext(typeof(ContextDB))]
    [Migration("20240420014844_migracion")]
    partial class migracion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("Candidate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1940),
                            Name = "Álvaro Delgado",
                            PhotoId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1941)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1945),
                            Name = "Laura Raffo",
                            PhotoId = 2,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1946)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1948),
                            Name = "Jorge Gandini",
                            PhotoId = 3,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1949)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1951),
                            Name = "Juan Sartori",
                            PhotoId = 4,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1952)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1953),
                            Name = "Yamandú Orsi",
                            PhotoId = 5,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1954)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1956),
                            Name = "Carolina Cosse",
                            PhotoId = 6,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1957)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1959),
                            Name = "Mario Bergara",
                            PhotoId = 7,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1959)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1961),
                            Name = "Pablo Mieres",
                            PhotoId = 8,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1962)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1964),
                            Name = "Edgardo Novick",
                            PhotoId = 9,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1964)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1966),
                            Name = "Andrés Lima",
                            PhotoId = 10,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1967)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1969),
                            Name = "Gabriel Gurméndez",
                            PhotoId = 11,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1970)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1972),
                            Name = "Robert Silva",
                            PhotoId = 12,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1973)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1975),
                            Name = "Andrés Ojeda",
                            PhotoId = 13,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1975)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1981),
                            Name = "Gustavo Zubía",
                            PhotoId = 14,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1982)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1984),
                            Name = "Guzmán Acosta y Lara",
                            PhotoId = 15,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1984)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1986),
                            Name = "Tabaré Viera",
                            PhotoId = 16,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1987)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("LatLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<int>("MunicipalityId1")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("MunicipalityId1");

                    b.ToTable("Circuit");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitDelegado", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("DelegadoId")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "DelegadoId");

                    b.HasIndex("DelegadoId");

                    b.ToTable("CircuitDelegado");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitParty", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int>("BlankVotes")
                        .HasColumnType("int");

                    b.Property<int?>("LastUpdateDelegadoId")
                        .HasColumnType("int");

                    b.Property<int>("NullVotes")
                        .HasColumnType("int");

                    b.Property<int>("ObservedVotes")
                        .HasColumnType("int");

                    b.Property<int>("RecurredVotes")
                        .HasColumnType("int");

                    b.Property<bool>("Step1completed")
                        .HasColumnType("bit");

                    b.Property<bool>("Step2completed")
                        .HasColumnType("bit");

                    b.Property<bool>("Step3completed")
                        .HasColumnType("bit");

                    b.Property<int?>("TotalPartyVotes")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "PartyId");

                    b.HasIndex("PartyId");

                    b.ToTable("CircuitParty");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitSlate", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("SlateId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSlateVotes")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "SlateId");

                    b.HasIndex("SlateId");

                    b.ToTable("CircuitSlate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "Frente Amplio",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2480),
                            Name = "Frente Amplio",
                            PartyId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2481)
                        },
                        new
                        {
                            Id = 2,
                            Comments = "Partido Nacional",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2486),
                            Name = "Partido Nacional",
                            PartyId = 2,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2487)
                        },
                        new
                        {
                            Id = 3,
                            Comments = "Partido Colorado",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2492),
                            Name = "Partido Colorado",
                            PartyId = 3,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2493)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Delegado");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CI = "11111111",
                            ClientId = 2,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2537),
                            Email = "gonzalo.delegado@datalexion.lat",
                            Name = "Gonzalo",
                            Phone = "099415831",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2538)
                        },
                        new
                        {
                            Id = 2,
                            CI = "12345678",
                            ClientId = 2,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2545),
                            Email = "diego.delegado@datalexion.lat",
                            Name = "Diego",
                            Phone = "099589896",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2546)
                        },
                        new
                        {
                            Id = 3,
                            CI = "22222222",
                            ClientId = 1,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2549),
                            Email = "pablo.delegado@datalexion.lat",
                            Name = "Pablo",
                            Phone = "099415831",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2549)
                        },
                        new
                        {
                            Id = 4,
                            CI = "33333333",
                            ClientId = 3,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2552),
                            Email = "gabriel.delegado@datalexion.lat",
                            Name = "Gabriel",
                            Phone = "099415831",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2553)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DelegadoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DelegadoId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Municipality");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SlateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SlateId");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoLongId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoShortId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhotoLongId")
                        .IsUnique()
                        .HasFilter("[PhotoLongId] IS NOT NULL");

                    b.HasIndex("PhotoShortId")
                        .IsUnique()
                        .HasFilter("[PhotoShortId] IS NOT NULL");

                    b.ToTable("Party");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2390),
                            Name = "Frente Amplio",
                            PhotoLongId = 101,
                            PhotoShortId = 111,
                            ShortName = "FA",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2391)
                        },
                        new
                        {
                            Id = 2,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2401),
                            Name = "Partido Nacional",
                            PhotoLongId = 102,
                            PhotoShortId = 112,
                            ShortName = "PN",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2401)
                        },
                        new
                        {
                            Id = 3,
                            Color = "#d62929",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2406),
                            Name = "Partido Colorado",
                            PhotoLongId = 103,
                            PhotoShortId = 113,
                            ShortName = "PC",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2407)
                        },
                        new
                        {
                            Id = 4,
                            Color = "#b929d6",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2410),
                            Name = "Partido Independiente",
                            PhotoLongId = 104,
                            PhotoShortId = 114,
                            ShortName = "PI",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2410)
                        },
                        new
                        {
                            Id = 5,
                            Color = "#f9bb28",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2413),
                            Name = "Cabildo Abierto",
                            PhotoLongId = 105,
                            PhotoShortId = 115,
                            ShortName = "CA",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2414)
                        },
                        new
                        {
                            Id = 6,
                            Color = "#009001",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2416),
                            Name = "PERI",
                            PhotoLongId = 106,
                            PhotoShortId = 116,
                            ShortName = "PERI",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2417)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int?>("CandidateId1")
                        .HasColumnType("int");

                    b.Property<int?>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int?>("CircuitId1")
                        .HasColumnType("int");

                    b.Property<int?>("CircuitPartyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PartyLongId")
                        .HasColumnType("int");

                    b.Property<int?>("PartyShortId")
                        .HasColumnType("int");

                    b.Property<int?>("SlateId")
                        .HasColumnType("int");

                    b.Property<int?>("SlateId1")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WingId")
                        .HasColumnType("int");

                    b.Property<int?>("WingId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId1");

                    b.HasIndex("PartyLongId");

                    b.HasIndex("PartyShortId");

                    b.HasIndex("SlateId1");

                    b.HasIndex("WingId1");

                    b.HasIndex("CircuitId1", "CircuitPartyId");

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1529),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo1.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1536)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1546),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo1.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1547)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1550),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo3.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1550)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1553),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo4.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1553)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1556),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo5.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1556)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1567),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo6.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1568)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1570),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo7.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1571)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1573),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo8.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1574)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1576),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo9.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1577)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1800),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo10.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1813)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1829),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo11.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1830)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1832),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo12.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1833)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1835),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo13.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1836)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1838),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo14.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1839)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1841),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo15.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1842)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1844),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo16.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(1844)
                        },
                        new
                        {
                            Id = 101,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2301),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo101.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2302)
                        },
                        new
                        {
                            Id = 102,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2308),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo102.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2309)
                        },
                        new
                        {
                            Id = 103,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2312),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo103.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2313)
                        },
                        new
                        {
                            Id = 104,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2315),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo104.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2316)
                        },
                        new
                        {
                            Id = 105,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2318),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo105.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2319)
                        },
                        new
                        {
                            Id = 106,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2322),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo106.jpg",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2323)
                        },
                        new
                        {
                            Id = 111,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2325),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo111.png",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2326)
                        },
                        new
                        {
                            Id = 112,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2328),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo112.png",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2328)
                        },
                        new
                        {
                            Id = 113,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2331),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo113.png",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2331)
                        },
                        new
                        {
                            Id = 114,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2334),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo114.png",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2335)
                        },
                        new
                        {
                            Id = 115,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2337),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo115.png",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2338)
                        },
                        new
                        {
                            Id = 116,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2340),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo116.png",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2341)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Center")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Zoom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2747),
                            Name = "Montevideo",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2749)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2752),
                            Name = "Canelones",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2753)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2755),
                            Name = "Maldonado",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2755)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2757),
                            Name = "Rocha",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2758)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2759),
                            Name = "Colonia",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2760)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2761),
                            Name = "Artigas",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2762)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2763),
                            Name = "Salto",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2764)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2766),
                            Name = "Paysandú",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2766)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2768),
                            Name = "Tacuarembó",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2768)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2770),
                            Name = "Rivera",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2770)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2772),
                            Name = "San José",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2773)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2774),
                            Name = "Durazno",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2775)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2776),
                            Name = "Treinta y Tres",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2777)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2778),
                            Name = "Cerro Largo",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2779)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2780),
                            Name = "Rivera",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2781)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2782),
                            Name = "Flores",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2783)
                        },
                        new
                        {
                            Id = 17,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2785),
                            Name = "Florida",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2785)
                        },
                        new
                        {
                            Id = 18,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2787),
                            Name = "Lavalleja",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2787)
                        },
                        new
                        {
                            Id = 19,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2789),
                            Name = "Soriano",
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2790)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.Property<int>("WingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WingId");

                    b.ToTable("Slate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 6,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2063),
                            Name = "5005",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2063),
                            WingId = 1
                        },
                        new
                        {
                            Id = 2,
                            CandidateId = 5,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2072),
                            Name = "711",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2073),
                            WingId = 1
                        },
                        new
                        {
                            Id = 3,
                            CandidateId = 6,
                            Color = "#d62929",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2075),
                            Name = "90",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2076),
                            WingId = 1
                        },
                        new
                        {
                            Id = 4,
                            CandidateId = 5,
                            Color = "#b929d6",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2079),
                            Name = "609",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2079),
                            WingId = 1
                        },
                        new
                        {
                            Id = 5,
                            CandidateId = 1,
                            Color = "#bec11a",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2082),
                            Name = "71",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2082),
                            WingId = 2
                        },
                        new
                        {
                            Id = 6,
                            CandidateId = 1,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2085),
                            Name = "404",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2085),
                            WingId = 2
                        },
                        new
                        {
                            Id = 7,
                            CandidateId = 2,
                            Color = "#ff0000",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2088),
                            Name = "40",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2088),
                            WingId = 2
                        },
                        new
                        {
                            Id = 8,
                            CandidateId = 2,
                            Color = "#00ff00",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2091),
                            Name = "250",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2092),
                            WingId = 2
                        },
                        new
                        {
                            Id = 9,
                            CandidateId = 2,
                            Color = "#0000ff",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2094),
                            Name = "880",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2095),
                            WingId = 2
                        },
                        new
                        {
                            Id = 10,
                            CandidateId = 11,
                            Color = "#ff00ff",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2098),
                            Name = "15",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2098),
                            WingId = 3
                        },
                        new
                        {
                            Id = 11,
                            CandidateId = 12,
                            Color = "#987654",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2101),
                            Name = "85",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2102),
                            WingId = 3
                        },
                        new
                        {
                            Id = 12,
                            CandidateId = 12,
                            Color = "#abcdef",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2104),
                            Name = "1",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2105),
                            WingId = 3
                        },
                        new
                        {
                            Id = 13,
                            CandidateId = 12,
                            Color = "#fedcba",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2107),
                            Name = "2000",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2108),
                            WingId = 3
                        },
                        new
                        {
                            Id = 14,
                            CandidateId = 11,
                            Color = "#012345",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2110),
                            Name = "1515",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2111),
                            WingId = 3
                        },
                        new
                        {
                            Id = 15,
                            CandidateId = 11,
                            Color = "#012345",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2114),
                            Name = "600",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2114),
                            WingId = 3
                        },
                        new
                        {
                            Id = 16,
                            CandidateId = 5,
                            Color = "#abcdef",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2118),
                            Name = "500",
                            ProvinceId = 2,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2118),
                            WingId = 1
                        },
                        new
                        {
                            Id = 17,
                            CandidateId = 5,
                            Color = "#fedcba",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2121),
                            Name = "123",
                            ProvinceId = 2,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2121),
                            WingId = 1
                        },
                        new
                        {
                            Id = 18,
                            CandidateId = 5,
                            Color = "#012345",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2124),
                            Name = "999",
                            ProvinceId = 2,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2124),
                            WingId = 1
                        },
                        new
                        {
                            Id = 19,
                            CandidateId = 5,
                            Color = "#abcdef",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2127),
                            Name = "777",
                            ProvinceId = 2,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2127),
                            WingId = 1
                        },
                        new
                        {
                            Id = 20,
                            CandidateId = 1,
                            Color = "#fedcba",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2129),
                            Name = "333",
                            ProvinceId = 2,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2130),
                            WingId = 2
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("Wing");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2669),
                            Name = "FA",
                            PartyId = 1,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2671)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2676),
                            Name = "PN",
                            PartyId = 2,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2677)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2679),
                            Name = "PC",
                            PartyId = 3,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2680)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2682),
                            Name = "PI",
                            PartyId = 4,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2682)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2684),
                            Name = "CA",
                            PartyId = 5,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2685)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2687),
                            Name = "PERI",
                            PartyId = 6,
                            Update = new DateTime(2024, 4, 19, 22, 48, 42, 193, DateTimeKind.Local).AddTicks(2688)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "8498a3ff-ca69-4b93-9a37-49a73c8dec77"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "role",
                            ClaimValue = "Analyst",
                            UserId = "e15e9299-d3b5-42fc-b101-44da6ad799de"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "role",
                            ClaimValue = "Analyst",
                            UserId = "ddc18aa2-c5c7-40c9-9db3-246d2a05a06c"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "role",
                            ClaimValue = "Analyst",
                            UserId = "b5172b14-f9e4-48f6-9634-2241c87f1719"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "8498a3ff-ca69-4b93-9a37-49a73c8dec77",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "e15e9299-d3b5-42fc-b101-44da6ad799de",
                            RoleId = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c"
                        },
                        new
                        {
                            UserId = "ddc18aa2-c5c7-40c9-9db3-246d2a05a06c",
                            RoleId = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c"
                        },
                        new
                        {
                            UserId = "b5172b14-f9e4-48f6-9634-2241c87f1719",
                            RoleId = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("DatalexionRole");

                    b.HasData(
                        new
                        {
                            Id = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 40, 853, DateTimeKind.Local).AddTicks(1655),
                            Update = new DateTime(2024, 4, 19, 22, 48, 40, 853, DateTimeKind.Local).AddTicks(1656)
                        },
                        new
                        {
                            Id = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c",
                            Name = "Analyst",
                            NormalizedName = "ANALYST",
                            Creation = new DateTime(2024, 4, 19, 22, 48, 40, 853, DateTimeKind.Local).AddTicks(1679),
                            Update = new DateTime(2024, 4, 19, 22, 48, 40, 853, DateTimeKind.Local).AddTicks(1682)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasIndex("ClientId");

                    b.HasDiscriminator().HasValue("DatalexionUser");

                    b.HasData(
                        new
                        {
                            Id = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af53680f-06e7-4e83-b16a-a4b29cc65e79",
                            Email = "adminfa@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINFA@DATALEXION.LAT",
                            NormalizedUserName = "ADMINFA",
                            PasswordHash = "AQAAAAIAAYagAAAAELkuRnqa5zmLV+x7jO2ZNVkFOX2aH8RR1sbITBiT4sjS+v7mdPsQhQ1gcrnPuzbh/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bccf6c0c-d3bc-4395-a246-edafebc0bb23",
                            TwoFactorEnabled = false,
                            UserName = "adminfa",
                            ClientId = 1,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 40, 853, DateTimeKind.Local).AddTicks(2496),
                            Name = "Admin FA",
                            Update = new DateTime(2024, 4, 19, 22, 48, 40, 853, DateTimeKind.Local).AddTicks(2500)
                        },
                        new
                        {
                            Id = "8498a3ff-ca69-4b93-9a37-49a73c8dec77",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eac628cb-ee19-4a05-ac24-323cfd248f3f",
                            Email = "adminpn@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINPN@DATALEXION.LAT",
                            NormalizedUserName = "ADMINPN",
                            PasswordHash = "AQAAAAIAAYagAAAAEH5AB/0oA5L8Qv9RZ7sDhiajTYLmu6bB/wQMbYWqWqJrOgSWFWKwq+qHxAAPq/KZaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9956a5fa-eaff-48f2-a93e-4aac2f946309",
                            TwoFactorEnabled = false,
                            UserName = "adminpn",
                            ClientId = 2,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 41, 68, DateTimeKind.Local).AddTicks(3431),
                            Name = "Admin PN",
                            Update = new DateTime(2024, 4, 19, 22, 48, 41, 68, DateTimeKind.Local).AddTicks(3438)
                        },
                        new
                        {
                            Id = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "237dfcd5-618a-4ffe-a8a9-24417bf6e9b2",
                            Email = "adminpc@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINPC@DATALEXION.LAT",
                            NormalizedUserName = "ADMINPC",
                            PasswordHash = "AQAAAAIAAYagAAAAEAo9Bu4X3DUbe+jAxrEVHvmsyjfbtldVjhrmRvLb4xsJY96/PI0kqwm/7Qk4jybN1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd5e142d-b576-4f0b-99c6-5773bda5c6b0",
                            TwoFactorEnabled = false,
                            UserName = "adminpc",
                            ClientId = 3,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 41, 271, DateTimeKind.Local).AddTicks(9150),
                            Name = "Admin PC",
                            Update = new DateTime(2024, 4, 19, 22, 48, 41, 271, DateTimeKind.Local).AddTicks(9155)
                        },
                        new
                        {
                            Id = "e15e9299-d3b5-42fc-b101-44da6ad799de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a505b991-1c2f-4f85-ac56-49d43cbc8239",
                            Email = "normal@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMAL@DATALEXION.LAT",
                            NormalizedUserName = "ANALYSTFA",
                            PasswordHash = "AQAAAAIAAYagAAAAEIbi5JmzFjOw/pE5iggCgNy23U2dVdPeyxTvVZaE88asgXbVjDel6u4h5kN5wpnX0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1151da94-7f2a-4424-b7c6-7a99947ddc6f",
                            TwoFactorEnabled = false,
                            UserName = "analystfa",
                            ClientId = 1,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 41, 500, DateTimeKind.Local).AddTicks(8439),
                            Name = "Analista FA",
                            Update = new DateTime(2024, 4, 19, 22, 48, 41, 500, DateTimeKind.Local).AddTicks(8446)
                        },
                        new
                        {
                            Id = "ddc18aa2-c5c7-40c9-9db3-246d2a05a06c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6eca28be-0799-48ce-983e-6e5fbdbe7efb",
                            Email = "normal@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMAL@DATALEXION.LAT",
                            NormalizedUserName = "ANALYSTPN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOggU7AYh3kHIO9G9MP0kCH2QkMNCBkBF8g1/K5mKNq3zNTqv8OopvWKsKg6FK/q3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1adbca97-0ce4-4f7c-9ca2-2738b2716367",
                            TwoFactorEnabled = false,
                            UserName = "analystpn",
                            ClientId = 2,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 41, 726, DateTimeKind.Local).AddTicks(145),
                            Name = "Analista PN",
                            Update = new DateTime(2024, 4, 19, 22, 48, 41, 726, DateTimeKind.Local).AddTicks(152)
                        },
                        new
                        {
                            Id = "b5172b14-f9e4-48f6-9634-2241c87f1719",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25444be4-e840-44da-89a3-a19c9abfe26b",
                            Email = "normal@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMAL@DATALEXION.LAT",
                            NormalizedUserName = "ANALYSTPC",
                            PasswordHash = "AQAAAAIAAYagAAAAEEbKLcwX+GP8O7pRXtMwftqV4HgEIAje95zqzyzPdeROLn0VesfQl1rltPQwbiLdPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f56c7913-3c05-49a9-a82a-e96e3d6d5c13",
                            TwoFactorEnabled = false,
                            UserName = "analystpc",
                            ClientId = 3,
                            Creation = new DateTime(2024, 4, 19, 22, 48, 41, 948, DateTimeKind.Local).AddTicks(2882),
                            Name = "Analista PC",
                            Update = new DateTime(2024, 4, 19, 22, 48, 41, 948, DateTimeKind.Local).AddTicks(2887)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Candidate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Candidate", "PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Municipality", null)
                        .WithMany("ListCircuits")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitDelegado", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitDelegados")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Delegado", "Delegado")
                        .WithMany("ListCircuitDelegados")
                        .HasForeignKey("DelegadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Delegado");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitParty", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitParties")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany("ListCircuitParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitSlate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitSlates")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany("ListCircuitSlates")
                        .HasForeignKey("SlateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Slate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Client", "Client")
                        .WithMany("ListDelegados")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Delegado", "Delegado")
                        .WithMany("ListMunicipalities")
                        .HasForeignKey("DelegadoId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Province", "Province")
                        .WithMany("ListMunicipalities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delegado");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Participant", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany("ListParticipants")
                        .HasForeignKey("SlateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Slate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "PhotoLong")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Party", "PhotoLongId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "PhotoShort")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Party", "PhotoShortId");

                    b.Navigation("PhotoLong");

                    b.Navigation("PhotoShort");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Photo", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId1");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "PartyLong")
                        .WithMany()
                        .HasForeignKey("PartyLongId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "PartyShort")
                        .WithMany()
                        .HasForeignKey("PartyShortId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany()
                        .HasForeignKey("SlateId1");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Wing", "Wing")
                        .WithMany()
                        .HasForeignKey("WingId1");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.CircuitParty", "Circuit")
                        .WithMany("ListPhotos")
                        .HasForeignKey("CircuitId1", "CircuitPartyId");

                    b.Navigation("Candidate");

                    b.Navigation("Circuit");

                    b.Navigation("PartyLong");

                    b.Navigation("PartyShort");

                    b.Navigation("Slate");

                    b.Navigation("Wing");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Slate", "PhotoId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Province", "Province")
                        .WithMany("ListSlates")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Wing", "Wing")
                        .WithMany("ListSlates")
                        .HasForeignKey("WingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Photo");

                    b.Navigation("Province");

                    b.Navigation("Wing");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany("ListWings")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Wing", "PhotoId");

                    b.Navigation("Party");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionUser", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Client", "Client")
                        .WithMany("ListUsers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.Navigation("ListCircuitDelegados");

                    b.Navigation("ListCircuitParties");

                    b.Navigation("ListCircuitSlates");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitParty", b =>
                {
                    b.Navigation("ListPhotos");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.Navigation("ListDelegados");

                    b.Navigation("ListUsers");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.Navigation("ListCircuitDelegados");

                    b.Navigation("ListMunicipalities");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.Navigation("ListCircuits");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.Navigation("ListCircuitParties");

                    b.Navigation("ListWings");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Province", b =>
                {
                    b.Navigation("ListMunicipalities");

                    b.Navigation("ListSlates");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.Navigation("ListCircuitSlates");

                    b.Navigation("ListParticipants");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.Navigation("ListSlates");
                });
#pragma warning restore 612, 618
        }
    }
}
