// <auto-generated />
using System;
using DatalexionBackend.Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatalexionBackend.Infrastructure.Migrations
{
    [DbContext(typeof(ContextDB))]
    [Migration("20240325180626_migracion")]
    partial class migracion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("Candidate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5379),
                            Name = "Álvaro Delgado",
                            PhotoId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5391)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5393),
                            Name = "Laura Raffo",
                            PhotoId = 2,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5393)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5395),
                            Name = "Jorge Gandini",
                            PhotoId = 3,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5396)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5397),
                            Name = "Juan Sartori",
                            PhotoId = 4,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5397)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5399),
                            Name = "Yamandú Orsi",
                            PhotoId = 5,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5399)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5401),
                            Name = "Carolina Cosse",
                            PhotoId = 6,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5401)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5402),
                            Name = "Mario Bergara",
                            PhotoId = 7,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5403)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5404),
                            Name = "Pablo Mieres",
                            PhotoId = 8,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5405)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5406),
                            Name = "Edgardo Novick",
                            PhotoId = 9,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5407)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5408),
                            Name = "Andrés Lima",
                            PhotoId = 10,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5409)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5410),
                            Name = "Gabriel Gurméndez",
                            PhotoId = 11,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5411)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5412),
                            Name = "Robert Silva",
                            PhotoId = 12,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5412)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5422),
                            Name = "Andrés Ojeda",
                            PhotoId = 13,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5422)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5424),
                            Name = "Gustavo Zubía",
                            PhotoId = 14,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5424)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5425),
                            Name = "Guzmán Acosta y Lara",
                            PhotoId = 15,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5426)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5427),
                            Name = "Tabaré Viera",
                            PhotoId = 16,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(5428)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlankVotes")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastUpdateDelegadoId")
                        .HasColumnType("int");

                    b.Property<string>("LatLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<int>("MunicipalityId1")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NullVotes")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("ObservedVotes")
                        .HasColumnType("int");

                    b.Property<int>("RecurredVotes")
                        .HasColumnType("int");

                    b.Property<bool>("Step1completed")
                        .HasColumnType("bit");

                    b.Property<bool>("Step2completed")
                        .HasColumnType("bit");

                    b.Property<bool>("Step3completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("MunicipalityId1");

                    b.ToTable("Circuit");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitDelegado", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("DelegadoId")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "DelegadoId");

                    b.HasIndex("DelegadoId");

                    b.ToTable("CircuitDelegado");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitParty", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "PartyId");

                    b.HasIndex("PartyId");

                    b.ToTable("CircuitParty");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitSlate", b =>
                {
                    b.Property<int>("CircuitId")
                        .HasColumnType("int");

                    b.Property<int>("SlateId")
                        .HasColumnType("int");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.HasKey("CircuitId", "SlateId");

                    b.HasIndex("SlateId");

                    b.ToTable("CircuitSlate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "Frente Amplio",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8271),
                            Name = "Frente Amplio",
                            PartyId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8272)
                        },
                        new
                        {
                            Id = 2,
                            Comments = "Partido Nacional",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8276),
                            Name = "Partido Nacional",
                            PartyId = 2,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8277)
                        },
                        new
                        {
                            Id = 3,
                            Comments = "Partido Colorado",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8281),
                            Name = "Partido Colorado",
                            PartyId = 3,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8282)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Delegado");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CI = "11111111",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8336),
                            Email = "gonzalo.delegado@datalexion.lat",
                            Name = "Gonzalo",
                            Phone = "099415831",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8337)
                        },
                        new
                        {
                            Id = 2,
                            CI = "12345678",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8343),
                            Email = "diego.delegado@datalexion.lat",
                            Name = "Diego",
                            Phone = "099589896",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8344)
                        },
                        new
                        {
                            Id = 3,
                            CI = "22222222",
                            ClientId = 1,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8346),
                            Email = "pablo.delegado@datalexion.lat",
                            Name = "Pablo",
                            Phone = "099415831",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8346)
                        },
                        new
                        {
                            Id = 4,
                            CI = "33333333",
                            ClientId = 3,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8348),
                            Email = "gabriel.delegado@datalexion.lat",
                            Name = "Gabriel",
                            Phone = "099415831",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8349)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DelegadoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DelegadoId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("ProvinceId1");

                    b.ToTable("Municipality");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SlateId")
                        .HasColumnType("int");

                    b.Property<int>("SlateId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SlateId");

                    b.HasIndex("SlateId1");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoLongId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoShortId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhotoLongId")
                        .IsUnique()
                        .HasFilter("[PhotoLongId] IS NOT NULL");

                    b.HasIndex("PhotoShortId")
                        .IsUnique()
                        .HasFilter("[PhotoShortId] IS NOT NULL");

                    b.ToTable("Party");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8049),
                            Name = "Frente Amplio",
                            PhotoLongId = 101,
                            PhotoShortId = 111,
                            ShortName = "FA",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8050)
                        },
                        new
                        {
                            Id = 2,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8078),
                            Name = "Partido Nacional",
                            PhotoLongId = 102,
                            PhotoShortId = 112,
                            ShortName = "PN",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8078)
                        },
                        new
                        {
                            Id = 3,
                            Color = "#d62929",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8081),
                            Name = "Partido Colorado",
                            PhotoLongId = 103,
                            PhotoShortId = 113,
                            ShortName = "PC",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8081)
                        },
                        new
                        {
                            Id = 4,
                            Color = "#b929d6",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8084),
                            Name = "Partido Independiente",
                            PhotoLongId = 104,
                            PhotoShortId = 114,
                            ShortName = "PI",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8084)
                        },
                        new
                        {
                            Id = 5,
                            Color = "#f9bb28",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8136),
                            Name = "Cabildo Abierto",
                            PhotoLongId = 105,
                            PhotoShortId = 115,
                            ShortName = "CA",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8137)
                        },
                        new
                        {
                            Id = 6,
                            Color = "#009001",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8139),
                            Name = "PERI",
                            PhotoLongId = 106,
                            PhotoShortId = 116,
                            ShortName = "PERI",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8140)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int?>("CandidateId1")
                        .HasColumnType("int");

                    b.Property<int?>("CircuitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PartyLongId")
                        .HasColumnType("int");

                    b.Property<int?>("PartyShortId")
                        .HasColumnType("int");

                    b.Property<int?>("SlateId")
                        .HasColumnType("int");

                    b.Property<int?>("SlateId1")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WingId")
                        .HasColumnType("int");

                    b.Property<int?>("WingId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId1");

                    b.HasIndex("CircuitId");

                    b.HasIndex("PartyLongId");

                    b.HasIndex("PartyShortId");

                    b.HasIndex("SlateId1");

                    b.HasIndex("WingId1");

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6456),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo1.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6464)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6492),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo1.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6493)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6495),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo3.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6496)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6499),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo4.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6500)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6504),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo5.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6505)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6508),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo6.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6521)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6524),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo7.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6524)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6527),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo8.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6527)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6530),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo9.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6531)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6535),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo10.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6535)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6538),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo11.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6538)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6550),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo12.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6550)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6553),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo13.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6554)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6574),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo14.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6575)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6579),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo15.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6580)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6582),
                            URL = "https://cienciasdesofa.lat/uploads/candidates/photo16.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 173, DateTimeKind.Local).AddTicks(6583)
                        },
                        new
                        {
                            Id = 101,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7933),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo101.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7934)
                        },
                        new
                        {
                            Id = 102,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7945),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo102.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7946)
                        },
                        new
                        {
                            Id = 103,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7951),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo103.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7952)
                        },
                        new
                        {
                            Id = 104,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7955),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo104.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7955)
                        },
                        new
                        {
                            Id = 105,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7958),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo105.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7958)
                        },
                        new
                        {
                            Id = 106,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7962),
                            URL = "https://cienciasdesofa.lat/uploads/partiesLong/photo106.jpg",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7963)
                        },
                        new
                        {
                            Id = 111,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7965),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo111.png",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7966)
                        },
                        new
                        {
                            Id = 112,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7968),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo112.png",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7969)
                        },
                        new
                        {
                            Id = 113,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7971),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo113.png",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7971)
                        },
                        new
                        {
                            Id = 114,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7975),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo114.png",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7975)
                        },
                        new
                        {
                            Id = 115,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7978),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo115.png",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7979)
                        },
                        new
                        {
                            Id = 116,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7981),
                            URL = "https://cienciasdesofa.lat/uploads/partiesShort/photo116.png",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7982)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Center")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Zoom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8644),
                            Name = "Montevideo",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8645)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8648),
                            Name = "Canelones",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8648)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8649),
                            Name = "Maldonado",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8650)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8651),
                            Name = "Rocha",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8651)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8652),
                            Name = "Colonia",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8653)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8654),
                            Name = "Artigas",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8655)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8656),
                            Name = "Salto",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8656)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8657),
                            Name = "Paysandú",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8658)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8658),
                            Name = "Tacuarembó",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8659)
                        },
                        new
                        {
                            Id = 10,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8660),
                            Name = "Rivera",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8660)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8661),
                            Name = "San José",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8662)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8663),
                            Name = "Durazno",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8664)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8665),
                            Name = "Treinta y Tres",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8665)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8666),
                            Name = "Cerro Largo",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8667)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8667),
                            Name = "Rivera",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8668)
                        },
                        new
                        {
                            Id = 16,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8669),
                            Name = "Flores",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8669)
                        },
                        new
                        {
                            Id = 17,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8670),
                            Name = "Florida",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8671)
                        },
                        new
                        {
                            Id = 18,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8671),
                            Name = "Lavalleja",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8672)
                        },
                        new
                        {
                            Id = 19,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8673),
                            Name = "Soriano",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8673)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.Property<int>("WingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WingId");

                    b.ToTable("Slate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 6,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7566),
                            Name = "5005",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7569),
                            WingId = 1
                        },
                        new
                        {
                            Id = 2,
                            CandidateId = 5,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7774),
                            Name = "711",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7774),
                            WingId = 1
                        },
                        new
                        {
                            Id = 3,
                            CandidateId = 6,
                            Color = "#d62929",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7778),
                            Name = "90",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7778),
                            WingId = 1
                        },
                        new
                        {
                            Id = 4,
                            CandidateId = 5,
                            Color = "#b929d6",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7780),
                            Name = "609",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7781),
                            WingId = 1
                        },
                        new
                        {
                            Id = 5,
                            CandidateId = 1,
                            Color = "#bec11a",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7783),
                            Name = "71",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7783),
                            WingId = 2
                        },
                        new
                        {
                            Id = 6,
                            CandidateId = 1,
                            Color = "#3153dd",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7785),
                            Name = "404",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7786),
                            WingId = 2
                        },
                        new
                        {
                            Id = 7,
                            CandidateId = 2,
                            Color = "#ff0000",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7789),
                            Name = "40",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7789),
                            WingId = 2
                        },
                        new
                        {
                            Id = 8,
                            CandidateId = 2,
                            Color = "#00ff00",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7791),
                            Name = "250",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7792),
                            WingId = 2
                        },
                        new
                        {
                            Id = 9,
                            CandidateId = 2,
                            Color = "#0000ff",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7794),
                            Name = "880",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7795),
                            WingId = 2
                        },
                        new
                        {
                            Id = 10,
                            CandidateId = 11,
                            Color = "#ff00ff",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7796),
                            Name = "15",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7797),
                            WingId = 3
                        },
                        new
                        {
                            Id = 11,
                            CandidateId = 12,
                            Color = "#987654",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7799),
                            Name = "85",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7800),
                            WingId = 3
                        },
                        new
                        {
                            Id = 12,
                            CandidateId = 12,
                            Color = "#abcdef",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7802),
                            Name = "1",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7803),
                            WingId = 3
                        },
                        new
                        {
                            Id = 13,
                            CandidateId = 12,
                            Color = "#fedcba",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7805),
                            Name = "2000",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7806),
                            WingId = 3
                        },
                        new
                        {
                            Id = 14,
                            CandidateId = 11,
                            Color = "#012345",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7808),
                            Name = "1515",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7808),
                            WingId = 3
                        },
                        new
                        {
                            Id = 15,
                            CandidateId = 11,
                            Color = "#012345",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7811),
                            Name = "600",
                            ProvinceId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(7811),
                            WingId = 3
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("Wing");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8545),
                            Name = "FA",
                            PartyId = 1,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8546)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8566),
                            Name = "PN",
                            PartyId = 2,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8567)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8569),
                            Name = "PC",
                            PartyId = 3,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8569)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8571),
                            Name = "PI",
                            PartyId = 4,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8572)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8573),
                            Name = "CA",
                            PartyId = 5,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8574)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8575),
                            Name = "PERI",
                            PartyId = 6,
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 174, DateTimeKind.Local).AddTicks(8576)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "c2ee6493-5a73-46f3-a3f2-46d1d11d7176"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "role",
                            ClaimValue = "Analyst",
                            UserId = "e0765c93-676c-4199-b7ee-d7877c471821"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "8498a3ff-ca69-4b93-9a37-49a73c8dec77"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "role",
                            ClaimValue = "Admin",
                            UserId = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c2ee6493-5a73-46f3-a3f2-46d1d11d7176",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "e0765c93-676c-4199-b7ee-d7877c471821",
                            RoleId = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c"
                        },
                        new
                        {
                            UserId = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "8498a3ff-ca69-4b93-9a37-49a73c8dec77",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        },
                        new
                        {
                            UserId = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6",
                            RoleId = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("DatalexionRole");

                    b.HasData(
                        new
                        {
                            Id = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 22, 581, DateTimeKind.Local).AddTicks(2903),
                            Update = new DateTime(2024, 3, 25, 15, 6, 22, 581, DateTimeKind.Local).AddTicks(2905)
                        },
                        new
                        {
                            Id = "bef4cbd4-1f2b-472f-a3f2-e1a901f6811c",
                            Name = "Analyst",
                            NormalizedName = "ANALYST",
                            Creation = new DateTime(2024, 3, 25, 15, 6, 22, 581, DateTimeKind.Local).AddTicks(2910),
                            Update = new DateTime(2024, 3, 25, 15, 6, 22, 581, DateTimeKind.Local).AddTicks(2911)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasIndex("ClientId");

                    b.HasDiscriminator().HasValue("DatalexionUser");

                    b.HasData(
                        new
                        {
                            Id = "c2ee6493-5a73-46f3-a3f2-46d1d11d7176",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77c30adf-739c-479d-982a-32148a2f1dbb",
                            Email = "admin@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@DATALEXION.LAT",
                            NormalizedUserName = "USERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEnInSa5jHlQRxrJv+XEO2819xNIY1t2uA8OKYpzX4CBWrB3wvUu+WHadPftJDaaeg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a02bc44f-cac3-4938-9f0d-1b9efaeefab8",
                            TwoFactorEnabled = false,
                            UserName = "useradmin",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 22, 581, DateTimeKind.Local).AddTicks(2925),
                            Name = "Usuario administrador",
                            Update = new DateTime(2024, 3, 25, 15, 6, 22, 581, DateTimeKind.Local).AddTicks(2925)
                        },
                        new
                        {
                            Id = "e0765c93-676c-4199-b7ee-d7877c471821",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6131dea0-0716-44ae-9cab-11a00d7803e0",
                            Email = "normal@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMAL@DATALEXION.LAT",
                            NormalizedUserName = "USERANALISTA",
                            PasswordHash = "AQAAAAIAAYagAAAAEJgLA+eI1op1/uTEgcDHwR36XupcEcU5MuHA2LJhS68Vieb5zysvYKjZ+lvBPYIn3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "490b370c-ee2c-4d32-b32a-2fe62e7b0a27",
                            TwoFactorEnabled = false,
                            UserName = "useranalista",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 23, 35, DateTimeKind.Local).AddTicks(7502),
                            Name = "Usuario analista",
                            Update = new DateTime(2024, 3, 25, 15, 6, 23, 35, DateTimeKind.Local).AddTicks(7515)
                        },
                        new
                        {
                            Id = "2a765d8b-9204-4e0f-b4ce-453f6e1bb592",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d18d1265-0dd5-45f7-82e1-b5447abb28ad",
                            Email = "adminfa@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINFA@DATALEXION.LAT",
                            NormalizedUserName = "ADMINFA",
                            PasswordHash = "AQAAAAIAAYagAAAAECKuBOgzRvrUjovUyGzOHMEEegS1xoUcbDYcy9uR+/nknQ035FI+aRwr6U/qKkYM4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb2829b7-75d3-4bd4-859c-c2066a14a155",
                            TwoFactorEnabled = false,
                            UserName = "adminfa",
                            ClientId = 1,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 22, 697, DateTimeKind.Local).AddTicks(6132),
                            Name = "Admin FA",
                            Update = new DateTime(2024, 3, 25, 15, 6, 22, 697, DateTimeKind.Local).AddTicks(6140)
                        },
                        new
                        {
                            Id = "8498a3ff-ca69-4b93-9a37-49a73c8dec77",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91e6c078-6b5e-4d54-a8d4-4908788c3801",
                            Email = "adminpn@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINPN@DATALEXION.LAT",
                            NormalizedUserName = "ADMINPN",
                            PasswordHash = "AQAAAAIAAYagAAAAEB2T9Z3IgcIV5Ve88HcyA25YdTDZtkuMGIlSNzRImxmNUcdrT6xgo7kPhvd3M+Izzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b83ba91-b508-40c9-98ea-5ab81dfce758",
                            TwoFactorEnabled = false,
                            UserName = "adminpn",
                            ClientId = 2,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 22, 807, DateTimeKind.Local).AddTicks(6699),
                            Name = "Admin PN",
                            Update = new DateTime(2024, 3, 25, 15, 6, 22, 807, DateTimeKind.Local).AddTicks(6712)
                        },
                        new
                        {
                            Id = "6c762a89-a7b6-4ee3-96d0-105b219dcaa6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b76c80c-2ed0-4514-ab93-f4f6157ee1c0",
                            Email = "adminpc@datalexion.lat",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINPC@DATALEXION.LAT",
                            NormalizedUserName = "ADMINPC",
                            PasswordHash = "AQAAAAIAAYagAAAAEMo0H6Kbw/VrY1+xj+PTXIlmxfgvq6nTQVdniS51o23OCb0n8BIrOUMcWjiBvUYBrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "786b9c49-4cf2-4caa-86b5-4b04653520f2",
                            TwoFactorEnabled = false,
                            UserName = "adminpc",
                            ClientId = 3,
                            Creation = new DateTime(2024, 3, 25, 15, 6, 22, 921, DateTimeKind.Local).AddTicks(8212),
                            Name = "Admin PC",
                            Update = new DateTime(2024, 3, 25, 15, 6, 22, 921, DateTimeKind.Local).AddTicks(8218)
                        });
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Candidate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Candidate", "PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Municipality", null)
                        .WithMany("ListCircuits")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitDelegado", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitDelegados")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Delegado", "Delegado")
                        .WithMany("ListCircuitDelegados")
                        .HasForeignKey("DelegadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Delegado");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitParty", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitParties")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany("ListCircuitParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.CircuitSlate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListCircuitSlates")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany("ListCircuitSlates")
                        .HasForeignKey("SlateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Slate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Client", "Client")
                        .WithMany("ListDelegados")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Delegado", "Delegado")
                        .WithMany("ListMunicipalities")
                        .HasForeignKey("DelegadoId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Province", null)
                        .WithMany("ListMunicipalities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delegado");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Participant", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", null)
                        .WithMany("ListParticipants")
                        .HasForeignKey("SlateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany()
                        .HasForeignKey("SlateId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slate");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "PhotoLong")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Party", "PhotoLongId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "PhotoShort")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Party", "PhotoShortId");

                    b.Navigation("PhotoLong");

                    b.Navigation("PhotoShort");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Photo", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId1");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Circuit", "Circuit")
                        .WithMany("ListPhotos")
                        .HasForeignKey("CircuitId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "PartyLong")
                        .WithMany()
                        .HasForeignKey("PartyLongId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "PartyShort")
                        .WithMany()
                        .HasForeignKey("PartyShortId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Slate", "Slate")
                        .WithMany()
                        .HasForeignKey("SlateId1");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Wing", "Wing")
                        .WithMany()
                        .HasForeignKey("WingId1");

                    b.Navigation("Candidate");

                    b.Navigation("Circuit");

                    b.Navigation("PartyLong");

                    b.Navigation("PartyShort");

                    b.Navigation("Slate");

                    b.Navigation("Wing");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Slate", "PhotoId");

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Province", "Province")
                        .WithMany("ListSlates")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Wing", "Wing")
                        .WithMany("ListSlates")
                        .HasForeignKey("WingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Photo");

                    b.Navigation("Province");

                    b.Navigation("Wing");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Party", "Party")
                        .WithMany("ListWings")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("DatalexionBackend.Core.Domain.Entities.Wing", "PhotoId");

                    b.Navigation("Party");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.IdentityEntities.DatalexionUser", b =>
                {
                    b.HasOne("DatalexionBackend.Core.Domain.Entities.Client", "Client")
                        .WithMany("ListUsers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Circuit", b =>
                {
                    b.Navigation("ListCircuitDelegados");

                    b.Navigation("ListCircuitParties");

                    b.Navigation("ListCircuitSlates");

                    b.Navigation("ListPhotos");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Client", b =>
                {
                    b.Navigation("ListDelegados");

                    b.Navigation("ListUsers");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Delegado", b =>
                {
                    b.Navigation("ListCircuitDelegados");

                    b.Navigation("ListMunicipalities");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Municipality", b =>
                {
                    b.Navigation("ListCircuits");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Party", b =>
                {
                    b.Navigation("ListCircuitParties");

                    b.Navigation("ListWings");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Province", b =>
                {
                    b.Navigation("ListMunicipalities");

                    b.Navigation("ListSlates");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Slate", b =>
                {
                    b.Navigation("ListCircuitSlates");

                    b.Navigation("ListParticipants");
                });

            modelBuilder.Entity("DatalexionBackend.Core.Domain.Entities.Wing", b =>
                {
                    b.Navigation("ListSlates");
                });
#pragma warning restore 612, 618
        }
    }
}
