<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DatalexionBackend.UI</name>
    </assembly>
    <members>
        <member name="M:DatalexionBackend.UI.Controllers.V1.AccountsController.GetUsers(DatalexionBackend.Core.DTO.PaginationDTO)">
            <summary>
            Obtiene la lista de usuarios paginada.
            </summary>
            <param name="paginationDTO">Parámetros de paginación.</param>
            <returns>Respuesta API con la lista de usuarios.</returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.AccountsController.GetRoles">
            <summary>
            Obtiene la lista de roles disponibles en el sistema.
            </summary>
            <returns>Respuesta API con la lista de roles.</returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.AccountsController.GetLogs(DatalexionBackend.Core.DTO.PaginationDTO)">
            <summary>
            Obtiene los registros de log paginados.
            </summary>
            <param name="paginationDTO">Parámetros de paginación.</param>
            <returns>Respuesta API con los registros de log.</returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.AccountsController.GetUserRole(System.String)">
            <summary>
            Obtiene los roles del usuario por ID.
            </summary>
            <param name="id">Identificador del usuario.</param>
            <returns>Respuesta API con los roles del usuario.</returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.AccountsController.MakeAdmin(System.String)">
            <summary>
            Asigna el rol de administrador a un usuario.
            </summary>
            <param name="usuarioId">Identificador del usuario.</param>
            <returns>Respuesta API indicando el resultado de la operación.</returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.AccountsController.RemoveAdmin(System.String)">
            <summary>
            Remueve el rol de administrador de un usuario.
            </summary>
            <param name="usuarioId">Identificador del usuario.</param>
            <returns>Respuesta API indicando el resultado de la operación.</returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.AccountsController.CreateUser(DatalexionBackend.Core.DTO.DatalexionUserCreateDTO)">
            <summary>
            Crea un nuevo usuario en el sistema.
            </summary>
            <param name="datalexionUserCreateDTO">Datos para la creación del usuario.</param>
            <returns>Respuesta API indicando el resultado de la operación.</returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.AccountsController.UpdateUser(System.String,DatalexionBackend.Core.DTO.DatalexionUserPatchDTO)">
            <summary>
            Actualiza los datos de un usuario existente.
            </summary>
            <param name="id">Identificador del usuario a actualizar.</param>
            <param name="datalexionUserPatchDTO">Datos para la actualización del usuario.</param>
            <returns>Respuesta API indicando el resultado de la operación.</returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.AccountsController.LoginDelegados(DatalexionBackend.Core.DTO.DelegadoLoginDTO)">
            <summary>
            Realiza el proceso de login para delegados.
            </summary>
            <param name="delegadoLoginDTO">Credenciales de login del delegado.</param>
            <returns>Respuesta API con el token de autenticación y datos del delegado.</returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.AccountsController.LoginGeneral(DatalexionBackend.Core.DTO.DatalexionUserLoginDTO)">
            <summary>
            Realiza el proceso de login general.
            </summary>
            <param name="datalexionUserLoginDTO">Credenciales de login del usuario.</param>
            <returns>Respuesta API con el token de autenticación y datos del usuario.</returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.AccountsController.CreateUserRole(DatalexionBackend.Core.DTO.DatalexionRoleCreateDTO)">
            <summary>
            Crea un nuevo rol en el sistema.
            </summary>
            <param name="datalexionRoleCreateDTO">Datos para la creación del rol.</param>
            <returns>Respuesta API indicando el resultado de la operación.</returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.AccountsController.UpdateUserRole(System.String,DatalexionBackend.Core.DTO.DatalexionRoleUpdateDTO)">
            <summary>
            Actualiza un rol existente.
            </summary>
            <param name="id">Identificador del rol a actualizar.</param>
            <param name="datalexionRoleUpdateDTO">Datos para la actualización del rol.</param>
            <returns>Respuesta API indicando el resultado de la operación.</returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.AccountsController.GetUsersByClient(System.Int32)">
            <summary>
            Obtiene la lista de usuarios asociados a un cliente específico.
            </summary>
            <param name="clientId">Identificador del cliente.</param>
            <returns>Respuesta API con la lista de usuarios asociados al cliente.</returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.AccountsController.GetLogsByClient(System.Int32)">
            <summary>
            Obtiene los registros de log asociados a un cliente específico.
            </summary>
            <param name="clientId">Identificador del cliente.</param>
            <returns>Respuesta API con los registros de log del cliente.</returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.AccountsController.IsUsernameAlreadyRegistered(System.String)">
            <summary>
            Verifica si el nombre de usuario ya está registrado en el sistema.
            </summary>
            <param name="username">Nombre de usuario a verificar.</param>
            <returns>Booleano indicando si el nombre de usuario está disponible.</returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.CandidatesController.HandlePhotoUpload(Microsoft.AspNetCore.Http.IFormFile,DatalexionBackend.Core.Domain.Entities.Candidate)">
            <summary>
            Sube una foto sola.
            </summary>
            <param name="photoFile"></param>
            <param name="candidate"></param>
            <returns></returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.CircuitsController.HandlePhotoUpload(System.Collections.Generic.List{Microsoft.AspNetCore.Http.IFormFile},DatalexionBackend.Core.Domain.Entities.Circuit)">
            <summary>
            Sube una lista de fotos.
            </summary>
            <param name="photoFiles"></param>
            <param name="circuit"></param>
            <returns></returns>
        </member>
        <member name="T:DatalexionBackend.UI.Controllers.V1.CustomBaseController`1">
            <summary>
            Esta versión simplifica los Controllers con esta base, mantengo ambas por si falla.
            Clase: https://www.udemy.com/course/construyendo-web-apis-restful-con-aspnet-core/learn/lecture/20659018#notes
            </summary>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.PartiesController.HandlePhotoUpload(Microsoft.AspNetCore.Http.IFormFile,DatalexionBackend.Core.Domain.Entities.Party,System.String,System.Action{DatalexionBackend.Core.Domain.Entities.Photo,DatalexionBackend.Core.Domain.Entities.Party})">
            <summary>
            Sube una foto sola.
            Uso de delegados para determinar el tipo dinámicamente.
            </summary>
            <param name="photoFile"></param>
            <param name="party"></param>
            <param name="containerName"></param>
            <param name="setPartyPhotoAction"></param>
            <returns></returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.SlatesController.HandlePhotoUpload(Microsoft.AspNetCore.Http.IFormFile,DatalexionBackend.Core.Domain.Entities.Slate)">
            <summary>
            Sube una foto sola.
            </summary>
            <param name="photoFile"></param>
            <param name="slate"></param>
            <returns></returns>
        </member>
        <member name="M:DatalexionBackend.UI.Controllers.V1.WingsController.HandlePhotoUpload(Microsoft.AspNetCore.Http.IFormFile,DatalexionBackend.Core.Domain.Entities.Wing)">
            <summary>
            Sube una foto sola.
            </summary>
            <param name="photoFile"></param>
            <param name="wing"></param>
            <returns></returns>
        </member>
        <member name="T:DatalexionBackend.UI.StartupExtensions.ConfigureServicesExtensions">
            <summary>
            Extension method to configure services
            s: https://www.udemy.com/course/asp-net-core-true-ultimate-guide-real-project/learn/lecture/34524780#overview
            </summary>
        </member>
    </members>
</doc>
